zookeeper.connect	(none)	Specifies the ZooKeeper connection string in the form <code>hostname:port</code> where host and port are the host and port of a ZooKeeper server. To allow connecting through other ZooKeeper nodes when that ZooKeeper machine is down you can also specify multiple hosts in the form <code>hostname1:port1,hostname2:port2,hostname3:port3</code>.	The server can also have a ZooKeeper chroot path as part of its ZooKeeper connection string which puts its data under some path in the global ZooKeeper namespace. For example to give a chroot path of <code>/chroot/path</code> you would give the connection string as <code>hostname1:port1,hostname2:port2,hostname3:port3/chroot/path</code>.
zookeeper.session.timeout.ms	18000	Zookeeper session timeout
zookeeper.connection.timeout.ms	(none)	The max time that the client waits to establish a connection to zookeeper. If not set, the value in zookeeper.session.timeout.ms is used
zookeeper.set.acl	false	Set client to use secure ACLs
zookeeper.max.in.flight.requests	10	The maximum number of unacknowledged requests the client will send to Zookeeper before blocking.
zookeeper.ssl.client.enable	false	Set client to use TLS when connecting to ZooKeeper. An explicit value overrides any value set via the <code>zookeeper.client.secure</code> system property (note the different name). Defaults to false if neither is set; when true, <code>zookeeper.clientCnxnSocket</code> must be set (typically to <code>org.apache.zookeeper.ClientCnxnSocketNetty</code>); other values to set may include <code>zookeeper.ssl.cipher.suites</code>, <code>zookeeper.ssl.crl.enable</code>, <code>zookeeper.ssl.enabled.protocols</code>, <code>zookeeper.ssl.endpoint.identification.algorithm</code>, <code>zookeeper.ssl.keystore.location</code>, <code>zookeeper.ssl.keystore.password</code>, <code>zookeeper.ssl.keystore.type</code>, <code>zookeeper.ssl.ocsp.enable</code>, <code>zookeeper.ssl.protocol</code>, <code>zookeeper.ssl.truststore.location</code>, <code>zookeeper.ssl.truststore.password</code>, <code>zookeeper.ssl.truststore.type</code>
zookeeper.clientCnxnSocket	(none)	Typically set to <code>org.apache.zookeeper.ClientCnxnSocketNetty</code> when using TLS connectivity to ZooKeeper. Overrides any explicit value set via the same-named <code>zookeeper.clientCnxnSocket</code> system property.
zookeeper.ssl.keystore.location	(none)	Keystore location when using a client-side certificate with TLS connectivity to ZooKeeper. Overrides any explicit value set via the <code>zookeeper.ssl.keyStore.location</code> system property (note the camelCase).
zookeeper.ssl.keystore.password	(none)	Keystore password when using a client-side certificate with TLS connectivity to ZooKeeper. Overrides any explicit value set via the <code>zookeeper.ssl.keyStore.password</code> system property (note the camelCase). Note that ZooKeeper does not support a key password different from the keystore password, so be sure to set the key password in the keystore to be identical to the keystore password; otherwise the connection attempt to Zookeeper will fail.
zookeeper.ssl.keystore.type	(none)	Keystore type when using a client-side certificate with TLS connectivity to ZooKeeper. Overrides any explicit value set via the <code>zookeeper.ssl.keyStore.type</code> system property (note the camelCase). The default value of <code>(none)</code> means the type will be auto-detected based on the filename extension of the keystore.
zookeeper.ssl.truststore.location	(none)	Truststore location when using TLS connectivity to ZooKeeper. Overrides any explicit value set via the <code>zookeeper.ssl.trustStore.location</code> system property (note the camelCase).
zookeeper.ssl.truststore.password	(none)	Truststore password when using TLS connectivity to ZooKeeper. Overrides any explicit value set via the <code>zookeeper.ssl.trustStore.password</code> system property (note the camelCase).
zookeeper.ssl.truststore.type	(none)	Truststore type when using TLS connectivity to ZooKeeper. Overrides any explicit value set via the <code>zookeeper.ssl.trustStore.type</code> system property (note the camelCase). The default value of <code>(none)</code> means the type will be auto-detected based on the filename extension of the truststore.
zookeeper.ssl.protocol	TLSv1.2	Specifies the protocol to be used in ZooKeeper TLS negotiation. An explicit value overrides any value set via the same-named <code>zookeeper.ssl.protocol</code> system property.
zookeeper.ssl.enabled.protocols	(none)	Specifies the enabled protocol(s) in ZooKeeper TLS negotiation (csv). Overrides any explicit value set via the <code>zookeeper.ssl.enabledProtocols</code> system property (note the camelCase). The default value of <code>(none)</code> means the enabled protocol will be the value of the <code>zookeeper.ssl.protocol</code> configuration property.
zookeeper.ssl.cipher.suites	(none)	Specifies the enabled cipher suites to be used in ZooKeeper TLS negotiation (csv). Overrides any explicit value set via the <code>zookeeper.ssl.ciphersuites</code> system property (note the single word "ciphersuites"). The default value of <code>(none)</code> means the list of enabled cipher suites is determined by the Java runtime being used.
zookeeper.ssl.endpoint.identification.algorithm	HTTPS	Specifies whether to enable hostname verification in the ZooKeeper TLS negotiation process, with (case-insensitively) "https" meaning ZooKeeper hostname verification is enabled and an explicit blank value meaning it is disabled (disabling it is only recommended for testing purposes). An explicit value overrides any "true" or "false" value set via the <code>zookeeper.ssl.hostnameVerification</code> system property (note the different name and values; true implies https and false implies blank).
zookeeper.ssl.crl.enable	false	Specifies whether to enable Certificate Revocation List in the ZooKeeper TLS protocols. Overrides any explicit value set via the <code>zookeeper.ssl.crl</code> system property (note the shorter name).
zookeeper.ssl.ocsp.enable	false	Specifies whether to enable Online Certificate Status Protocol in the ZooKeeper TLS protocols. Overrides any explicit value set via the <code>zookeeper.ssl.ocsp</code> system property (note the shorter name).
broker.id.generation.enable	true	Enable automatic broker id generation on the server. When enabled the value configured for reserved.broker.max.id should be reviewed.
reserved.broker.max.id	1000	Max number that can be used for a broker.id
broker.id	-1	The broker id for this server. If unset, a unique broker id will be generated.To avoid conflicts between zookeeper generated broker id's and user configured broker id's, generated broker ids start from reserved.broker.max.id + 1.
message.max.bytes	1048588	The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers' fetch size must also be increased so that they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.This can be set per topic with the topic level <code>max.message.bytes</code> config.
num.network.threads	3	The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.io.threads	8	The number of threads that the server uses for processing requests, which may include disk I/O
num.replica.alter.log.dirs.threads	(none)	The number of threads that can move replicas between log directories, which may include disk I/O
background.threads	10	The number of threads to use for various background processing tasks
queued.max.requests	500	The number of queued requests allowed for data-plane, before blocking the network threads
queued.max.request.bytes	-1	The number of queued bytes allowed before no more requests are read
request.timeout.ms	30000	The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.
socket.connection.setup.timeout.ms	10000	The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.
socket.connection.setup.timeout.max.ms	30000	The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.
metadata.log.max.record.bytes.between.snapshots	20971520	This is the maximum number of bytes in the log between the latest snapshot and the high-watermark needed before generating a new snapshot.
process.roles	[]	The roles that this process plays: 'broker', 'controller', or 'broker,controller' if it is both. This configuration is only applicable for clusters in KRaft (Kafka Raft) mode (instead of ZooKeeper). Leave this config undefined or empty for Zookeeper clusters.
node.id	-1	The node ID associated with the roles this process is playing when `process.roles` is non-empty. This is required configuration when running in KRaft mode.
initial.broker.registration.timeout.ms	60000	When initially registering with the controller quorum, the number of milliseconds to wait before declaring failure and exiting the broker process.
broker.heartbeat.interval.ms	2000	The length of time in milliseconds between broker heartbeats. Used when running in KRaft mode.
broker.session.timeout.ms	9000	The length of time in milliseconds that a broker lease lasts if no heartbeats are made. Used when running in KRaft mode.
controller.listener.names	(none)	A comma-separated list of the names of the listeners used by the controller. This is required if running in KRaft mode. When communicating with the controller quorum, the broker will always use the first listener in this list.	 Note: The ZK-based controller should not set this configuration.
sasl.mechanism.controller.protocol	GSSAPI	SASL mechanism used for communication with controllers. Default is GSSAPI.
metadata.log.dir	(none)	This configuration determines where we put the metadata log for clusters in KRaft mode. If it is not set, the metadata log is placed in the first log directory from log.dirs.
metadata.log.segment.bytes	1073741824	The maximum size of a single metadata log file.
metadata.log.segment.min.bytes	8388608	Override the minimum size for a single metadata log file. This should be used for testing only.
metadata.log.segment.ms	604800000	The maximum time before a new metadata log file is rolled out (in milliseconds).
metadata.max.retention.bytes	-1	The maximum combined size of the metadata log and snapshots before deleting old snapshots and log files. Since at least one snapshot must exist before any logs can be deleted, this is a soft limit.
metadata.max.retention.ms	604800000	The number of milliseconds to keep a metadata log file or snapshot before deleting it. Since at least one snapshot must exist before any logs can be deleted, this is a soft limit.
metadata.max.idle.interval.ms	500	This configuration controls how often the active controller should write no-op records to the metadata partition. If the value is 0, no-op records are not appended to the metadata partition. The default value is 500
authorizer.class.name		The fully qualified name of a class that implements <code>org.apache.kafka.server.authorizer.Authorizer</code> interface, which is used by the broker for authorization.
early.start.listeners	(none)	A comma-separated list of listener names which may be started before the authorizer has finished initialization. This is useful when the authorizer is dependent on the cluster itself for bootstrapping, as is the case for the StandardAuthorizer (which stores ACLs in the metadata log.) By default, all listeners included in controller.listener.names will also be early start listeners. A listener should not appear in this list if it accepts external traffic.
listeners	PLAINTEXT://:9092	Listener List - Comma-separated list of URIs we will listen on and the listener names. If the listener name is not a security protocol, <code>listener.security.protocol.map</code> must also be set.	 Listener names and port numbers must be unique.	 Specify hostname as 0.0.0.0 to bind to all interfaces.	 Leave hostname empty to bind to default interface.	 Examples of legal listener lists:	 PLAINTEXT://myhost:9092,SSL://:9091	 CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093
advertised.listeners	(none)	Listeners to publish to ZooKeeper for clients to use, if different than the <code>listeners</code> config property. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, the value for <code>listeners</code> will be used. Unlike <code>listeners</code>, it is not valid to advertise the 0.0.0.0 meta-address.	 Also unlike <code>listeners</code>, there can be duplicated ports in this property, so that one listener can be configured to advertise another listener's address. This can be useful in some cases where external load balancers are used.
listener.security.protocol.map	PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL	Map between listener names and security protocols. This must be defined for the same security protocol to be usable in more than one port or IP. For example, internal and external traffic can be separated even if SSL is required for both. Concretely, the user could define listeners with names INTERNAL and EXTERNAL and this property as: `INTERNAL:SSL,EXTERNAL:SSL`. As shown, key and value are separated by a colon and map entries are separated by commas. Each listener name should only appear once in the map. Different security (SSL and SASL) settings can be configured for each listener by adding a normalised prefix (the listener name is lowercased) to the config name. For example, to set a different keystore for the INTERNAL listener, a config with name <code>listener.name.internal.ssl.keystore.location</code> would be set. If the config for the listener name is not set, the config will fallback to the generic config (i.e. <code>ssl.keystore.location</code>). Note that in KRaft a default mapping from the listener names defined by <code>controller.listener.names</code> to PLAINTEXT is assumed if no explicit mapping is provided and no other security protocol is in use.
control.plane.listener.name	(none)	Name of listener used for communication between controller and brokers. Broker will use the control.plane.listener.name to locate the endpoint in listeners list, to listen for connections from the controller. For example, if a broker's config is :	listeners = INTERNAL://192.1.1.8:9092, EXTERNAL://10.1.1.5:9093, CONTROLLER://192.1.1.8:9094	listener.security.protocol.map = INTERNAL:PLAINTEXT, EXTERNAL:SSL, CONTROLLER:SSL	control.plane.listener.name = CONTROLLER	On startup, the broker will start listening on "192.1.1.8:9094" with security protocol "SSL".	On controller side, when it discovers a broker's published endpoints through zookeeper, it will use the control.plane.listener.name to find the endpoint, which it will use to establish connection to the broker.	For example, if the broker's published endpoints on zookeeper are :	"endpoints" : ["INTERNAL://broker1.example.com:9092","EXTERNAL://broker1.example.com:9093","CONTROLLER://broker1.example.com:9094"]	 and the controller's config is :	listener.security.protocol.map = INTERNAL:PLAINTEXT, EXTERNAL:SSL, CONTROLLER:SSL	control.plane.listener.name = CONTROLLER	then controller will use "broker1.example.com:9094" with security protocol "SSL" to connect to the broker.	If not explicitly configured, the default value will be (none) and there will be no dedicated endpoints for controller connections.	If explicitly configured, the value cannot be the same as the value of <code>inter.broker.listener.name</code>.
socket.send.buffer.bytes	102400	The SO_SNDBUF buffer of the socket server sockets. If the value is -1, the OS default will be used.
socket.receive.buffer.bytes	102400	The SO_RCVBUF buffer of the socket server sockets. If the value is -1, the OS default will be used.
socket.request.max.bytes	104857600	The maximum number of bytes in a socket request
socket.listen.backlog.size	50	The maximum number of pending connections on the socket. In Linux, you may also need to configure `somaxconn` and `tcp_max_syn_backlog` kernel parameters accordingly to make the configuration takes effect.
max.connections.per.ip	2147483647	The maximum number of connections we allow from each ip address. This can be set to 0 if there are overrides configured using max.connections.per.ip.overrides property. New connections from the ip address are dropped if the limit is reached.
max.connections.per.ip.overrides		A comma-separated list of per-ip or hostname overrides to the default maximum number of connections. An example value is "hostName:100,127.0.0.1:200"
max.connections	2147483647	The maximum number of connections we allow in the broker at any time. This limit is applied in addition to any per-ip limits configured using max.connections.per.ip. Listener-level limits may also be configured by prefixing the config name with the listener prefix, for example, <code>listener.name.internal.max.connections</code>. Broker-wide limit should be configured based on broker capacity while listener limits should be configured based on application requirements. New connections are blocked if either the listener or broker limit is reached. Connections on the inter-broker listener are permitted even if broker-wide limit is reached. The least recently used connection on another listener will be closed in this case.
max.connection.creation.rate	2147483647	The maximum connection creation rate we allow in the broker at any time. Listener-level limits may also be configured by prefixing the config name with the listener prefix, for example, <code>listener.name.internal.max.connection.creation.rate</code>.Broker-wide connection rate limit should be configured based on broker capacity while listener limits should be configured based on application requirements. New connections will be throttled if either the listener or the broker limit is reached, with the exception of inter-broker listener. Connections on the inter-broker listener will be throttled only when the listener-level rate limit is reached.
connections.max.idle.ms	600000	Idle connections timeout: the server socket processor threads close the connections that idle more than this
connection.failed.authentication.delay.ms	100	Connection close delay on failed authentication: this is the time (in milliseconds) by which connection close will be delayed on authentication failure. This must be configured to be less than connections.max.idle.ms to prevent connection timeout.
broker.rack	(none)	Rack of the broker. This will be used in rack aware replication assignment for fault tolerance. Examples: `RACK1`, `us-east-1d`
num.partitions	1	The default number of log partitions per topic
log.dir	/tmp/kafka-logs	The directory in which the log data is kept (supplemental for log.dirs property)
log.dirs	(none)	A comma-separated list of the directories where the log data is stored. If not set, the value in log.dir is used.
log.segment.bytes	1073741824	The maximum size of a single log file
log.roll.ms	(none)	The maximum time before a new log segment is rolled out (in milliseconds). If not set, the value in log.roll.hours is used
log.roll.hours	168	The maximum time before a new log segment is rolled out (in hours), secondary to log.roll.ms property
log.roll.jitter.ms	(none)	The maximum jitter to subtract from logRollTimeMillis (in milliseconds). If not set, the value in log.roll.jitter.hours is used
log.roll.jitter.hours	0	The maximum jitter to subtract from logRollTimeMillis (in hours), secondary to log.roll.jitter.ms property
log.retention.ms	(none)	The number of milliseconds to keep a log file before deleting it (in milliseconds), If not set, the value in log.retention.minutes is used. If set to -1, no time limit is applied.
log.retention.minutes	(none)	The number of minutes to keep a log file before deleting it (in minutes), secondary to log.retention.ms property. If not set, the value in log.retention.hours is used
log.retention.hours	168	The number of hours to keep a log file before deleting it (in hours), tertiary to log.retention.ms property
log.retention.bytes	-1	The maximum size of the log before deleting it
log.retention.check.interval.ms	300000	The frequency in milliseconds that the log cleaner checks whether any log is eligible for deletion
log.cleanup.policy	[delete]	The default cleanup policy for segments beyond the retention window. A comma separated list of valid policies. Valid policies are: "delete" and "compact"
log.cleaner.threads	1	The number of background threads to use for log cleaning
log.cleaner.io.max.bytes.per.second	1.7976931348623157E308	The log cleaner will be throttled so that the sum of its read and write i/o will be less than this value on average
log.cleaner.dedupe.buffer.size	134217728	The total memory used for log deduplication across all cleaner threads
log.cleaner.io.buffer.size	524288	The total memory used for log cleaner I/O buffers across all cleaner threads
log.cleaner.io.buffer.load.factor	0.9	Log cleaner dedupe buffer load factor. The percentage full the dedupe buffer can become. A higher value will allow more log to be cleaned at once but will lead to more hash collisions
log.cleaner.backoff.ms	15000	The amount of time to sleep when there are no logs to clean
log.cleaner.min.cleanable.ratio	0.5	The minimum ratio of dirty log to total log for a log to eligible for cleaning. If the log.cleaner.max.compaction.lag.ms or the log.cleaner.min.compaction.lag.ms configurations are also specified, then the log compactor considers the log eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the log.cleaner.min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the log.cleaner.max.compaction.lag.ms period.
log.cleaner.enable	true	Enable the log cleaner process to run on the server. Should be enabled if using any topics with a cleanup.policy=compact including the internal offsets topic. If disabled those topics will not be compacted and continually grow in size.
log.cleaner.delete.retention.ms	86400000	The amount of time to retain delete tombstone markers for log compacted topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).
log.cleaner.min.compaction.lag.ms	0	The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
log.cleaner.max.compaction.lag.ms	9223372036854775807	The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.
log.index.size.max.bytes	10485760	The maximum size in bytes of the offset index
log.index.interval.bytes	4096	The interval with which we add an entry to the offset index
log.flush.interval.messages	9223372036854775807	The number of messages accumulated on a log partition before messages are flushed to disk
log.segment.delete.delay.ms	60000	The amount of time to wait before deleting a file from the filesystem
log.flush.scheduler.interval.ms	9223372036854775807	The frequency in ms that the log flusher checks whether any log needs to be flushed to disk
log.flush.interval.ms	(none)	The maximum time in ms that a message in any topic is kept in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used
log.flush.offset.checkpoint.interval.ms	60000	The frequency with which we update the persistent record of the last flush which acts as the log recovery point
log.flush.start.offset.checkpoint.interval.ms	60000	The frequency with which we update the persistent record of log start offset
log.preallocate	false	Should pre allocate file when create new segment? If you are using Kafka on Windows, you probably need to set it to true.
num.recovery.threads.per.data.dir	1	The number of threads per data directory to be used for log recovery at startup and flushing at shutdown
auto.create.topics.enable	true	Enable auto creation of topic on the server
min.insync.replicas	1	When a producer sets acks to "all" (or "-1"), min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).<br>When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of "all". This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
log.message.format.version	3.0-IV1	Specify the message format version the broker will use to append messages to the logs. The value should be a valid MetadataVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check MetadataVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don't understand.
log.message.timestamp.type	CreateTime	Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`
log.message.timestamp.difference.max.ms	9223372036854775807	The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If log.message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if log.message.timestamp.type=LogAppendTime.The maximum timestamp difference allowed should be no greater than log.retention.ms to avoid unnecessarily frequent log rolling.
create.topic.policy.class.name	(none)	The create topic policy class that should be used for validation. The class should implement the <code>org.apache.kafka.server.policy.CreateTopicPolicy</code> interface.
alter.config.policy.class.name	(none)	The alter configs policy class that should be used for validation. The class should implement the <code>org.apache.kafka.server.policy.AlterConfigPolicy</code> interface.
log.message.downconversion.enable	true	This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to <code>false</code>, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with <code>UNSUPPORTED_VERSION</code> error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers.
controller.socket.timeout.ms	30000	The socket timeout for controller-to-broker channels
default.replication.factor	1	The default replication factors for automatically created topics
replica.lag.time.max.ms	30000	If a follower hasn't sent any fetch requests or hasn't consumed up to the leaders log end offset for at least this time, the leader will remove the follower from isr
replica.socket.timeout.ms	30000	The socket timeout for network requests. Its value should be at least replica.fetch.wait.max.ms
replica.socket.receive.buffer.bytes	65536	The socket receive buffer for network requests
replica.fetch.max.bytes	1048576	The number of bytes of messages to attempt to fetch for each partition. This is not an absolute maximum, if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that progress can be made. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config).
replica.fetch.wait.max.ms	500	The maximum wait time for each fetcher request issued by follower replicas. This value should always be less than the replica.lag.time.max.ms at all times to prevent frequent shrinking of ISR for low throughput topics
replica.fetch.backoff.ms	1000	The amount of time to sleep when fetch partition error occurs.
replica.fetch.min.bytes	1	Minimum bytes expected for each fetch response. If not enough bytes, wait up to <code>replica.fetch.wait.max.ms</code> (broker config).
replica.fetch.response.max.bytes	10485760	Maximum bytes expected for the entire fetch response. Records are fetched in batches, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that progress can be made. As such, this is not an absolute maximum. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config).
num.replica.fetchers	1	Number of fetcher threads used to replicate records from each source broker. The total number of fetchers on each broker is bound by <code>num.replica.fetchers</code> multiplied by the number of brokers in the cluster.Increasing this value can increase the degree of I/O parallelism in the follower and leader broker at the cost of higher CPU and memory utilization.
replica.high.watermark.checkpoint.interval.ms	5000	The frequency with which the high watermark is saved out to disk
fetch.purgatory.purge.interval.requests	1000	The purge interval (in number of requests) of the fetch request purgatory
producer.purgatory.purge.interval.requests	1000	The purge interval (in number of requests) of the producer request purgatory
delete.records.purgatory.purge.interval.requests	1	The purge interval (in number of requests) of the delete records request purgatory
auto.leader.rebalance.enable	true	Enables auto leader balancing. A background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`. If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.
leader.imbalance.per.broker.percentage	10	The ratio of leader imbalance allowed per broker. The controller would trigger a leader balance if it goes above this value per broker. The value is specified in percentage.
leader.imbalance.check.interval.seconds	300	The frequency with which the partition rebalance check is triggered by the controller
unclean.leader.election.enable	false	Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss
security.inter.broker.protocol	PLAINTEXT	Security protocol used to communicate between brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL. It is an error to set this and inter.broker.listener.name properties at the same time.
inter.broker.protocol.version	3.3-IV3	Specify which version of the inter-broker protocol will be used.	 This is typically bumped after all brokers were upgraded to a new version.	 Example of some valid values are: 0.8.0, 0.8.1, 0.8.1.1, 0.8.2, 0.8.2.0, 0.8.2.1, 0.9.0.0, 0.9.0.1 Check MetadataVersion for the full list.
inter.broker.listener.name	(none)	Name of listener used for communication between brokers. If this is unset, the listener name is defined by security.inter.broker.protocol. It is an error to set this and security.inter.broker.protocol properties at the same time.
replica.selector.class	(none)	The fully qualified class name that implements ReplicaSelector. This is used by the broker to find the preferred read replica. By default, we use an implementation that returns the leader.
controlled.shutdown.max.retries	3	Controlled shutdown can fail for multiple reasons. This determines the number of retries when such failure happens
controlled.shutdown.retry.backoff.ms	5000	Before each retry, the system needs time to recover from the state that caused the previous failure (Controller fail over, replica lag etc). This config determines the amount of time to wait before retrying.
controlled.shutdown.enable	true	Enable controlled shutdown of the server
group.min.session.timeout.ms	6000	The minimum allowed session timeout for registered consumers. Shorter timeouts result in quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources.
group.max.session.timeout.ms	1800000	The maximum allowed session timeout for registered consumers. Longer timeouts give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures.
group.initial.rebalance.delay.ms	3000	The amount of time the group coordinator will wait for more consumers to join a new group before performing the first rebalance. A longer delay means potentially fewer rebalances, but increases the time until processing begins.
group.max.size	2147483647	The maximum number of consumers that a single consumer group can accommodate.
offset.metadata.max.bytes	4096	The maximum size for a metadata entry associated with an offset commit
offsets.load.buffer.size	5242880	Batch size for reading from the offsets segments when loading offsets into the cache (soft-limit, overridden if records are too large).
offsets.topic.replication.factor	3	The replication factor for the offsets topic (set higher to ensure availability). Internal topic creation will fail until the cluster size meets this replication factor requirement.
offsets.topic.num.partitions	50	The number of partitions for the offset commit topic (should not change after deployment)
offsets.topic.segment.bytes	104857600	The offsets topic segment bytes should be kept relatively small in order to facilitate faster log compaction and cache loads
offsets.topic.compression.codec	0	Compression codec for the offsets topic - compression may be used to achieve "atomic" commits
offsets.retention.minutes	10080	For subscribed consumers, committed offset of a specific partition will be expired and discarded when 1) this retention period has elapsed after the consumer group loses all its consumers (i.e. becomes empty); 2) this retention period has elapsed since the last time an offset is committed for the partition and the group is no longer subscribed to the corresponding topic. For standalone consumers (using manual assignment), offsets will be expired after this retention period has elapsed since the time of last commit. Note that when a group is deleted via the delete-group request, its committed offsets will also be deleted without extra retention period; also when a topic is deleted via the delete-topic request, upon propagated metadata update any group's committed offsets for that topic will also be deleted without extra retention period.
offsets.retention.check.interval.ms	600000	Frequency at which to check for stale offsets
offsets.commit.timeout.ms	5000	Offset commit will be delayed until all replicas for the offsets topic receive the commit or this timeout is reached. This is similar to the producer request timeout.
offsets.commit.required.acks	-1	The required acks before the commit can be accepted. In general, the default (-1) should not be overridden
delete.topic.enable	true	Enables delete topic. Delete topic through the admin tool will have no effect if this config is turned off
compression.type	producer	Specify the final compression type for a given topic. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer' which means retain the original compression codec set by the producer.
transactional.id.expiration.ms	604800000	The time in ms that the transaction coordinator will wait without receiving any transaction status updates for the current transaction before expiring its transactional id. Transactional IDs will not expire while a the transaction is still ongoing.
transaction.max.timeout.ms	900000	The maximum allowed timeout for transactions. If a client’s requested transaction time exceed this, then the broker will return an error in InitProducerIdRequest. This prevents a client from too large of a timeout, which can stall consumers reading from topics included in the transaction.
transaction.state.log.min.isr	2	Overridden min.insync.replicas config for the transaction topic.
transaction.state.log.load.buffer.size	5242880	Batch size for reading from the transaction log segments when loading producer ids and transactions into the cache (soft-limit, overridden if records are too large).
transaction.state.log.replication.factor	3	The replication factor for the transaction topic (set higher to ensure availability). Internal topic creation will fail until the cluster size meets this replication factor requirement.
transaction.state.log.num.partitions	50	The number of partitions for the transaction topic (should not change after deployment).
transaction.state.log.segment.bytes	104857600	The transaction topic segment bytes should be kept relatively small in order to facilitate faster log compaction and cache loads
transaction.abort.timed.out.transaction.cleanup.interval.ms	10000	The interval at which to rollback transactions that have timed out
transaction.remove.expired.transaction.cleanup.interval.ms	3600000	The interval at which to remove transactions that have expired due to <code>transactional.id.expiration.ms</code> passing
producer.id.expiration.ms	86400000	The time in ms that a topic partition leader will wait before expiring producer IDs. Producer IDs will not expire while a transaction associated to them is still ongoing. Note that producer IDs may expire sooner if the last write from the producer ID is deleted due to the topic's retention settings. Setting this value the same or higher than <code>delivery.timeout.ms</code> can help prevent expiration during retries and protect against message duplication, but the default should be reasonable for most use cases.
producer.id.expiration.check.interval.ms	600000	The time in ms that a topic partition leader will wait before expiring producer IDs. Producer IDs will not expire while a transaction associated to them is still ongoing. Note that producer IDs may expire sooner if the last write from the producer ID is deleted due to the topic's retention settings. Setting this value the same or higher than <code>delivery.timeout.ms</code> can help prevent expiration during retries and protect against message duplication, but the default should be reasonable for most use cases.
max.incremental.fetch.session.cache.slots	1000	The maximum number of incremental fetch sessions that we will maintain.
fetch.max.bytes	57671680	The maximum number of bytes we will return for a fetch request. Must be at least 1024.
metrics.num.samples	2	The number of samples maintained to compute metrics.
metrics.sample.window.ms	30000	The window of time a metrics sample is computed over.
metric.reporters	[]	A list of classes to use as metrics reporters. Implementing the <code>org.apache.kafka.common.metrics.MetricsReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.
metrics.recording.level	INFO	The highest recording level for metrics.
auto.include.jmx.reporter	true	Deprecated. Whether to automatically include JmxReporter even if it's not listed in <code>metric.reporters</code>. This configuration will be removed in Kafka 4.0, users should instead include <code>org.apache.kafka.common.metrics.JmxReporter</code> in <code>metric.reporters</code> in order to enable the JmxReporter.
kafka.metrics.reporters	[]	A list of classes to use as Yammer metrics custom reporters. The reporters should implement <code>kafka.metrics.KafkaMetricsReporter</code> trait. If a client wants to expose JMX operations on a custom reporter, the custom reporter needs to additionally implement an MBean trait that extends <code>kafka.metrics.KafkaMetricsReporterMBean</code> trait so that the registered MBean is compliant with the standard MBean convention.
kafka.metrics.polling.interval.secs	10	The metrics polling interval (in seconds) which can be used in kafka.metrics.reporters implementations.
quota.window.num	11	The number of samples to retain in memory for client quotas
replication.quota.window.num	11	The number of samples to retain in memory for replication quotas
alter.log.dirs.replication.quota.window.num	11	The number of samples to retain in memory for alter log dirs replication quotas
controller.quota.window.num	11	The number of samples to retain in memory for controller mutation quotas
quota.window.size.seconds	1	The time span of each sample for client quotas
replication.quota.window.size.seconds	1	The time span of each sample for replication quotas
alter.log.dirs.replication.quota.window.size.seconds	1	The time span of each sample for alter log dirs replication quotas
controller.quota.window.size.seconds	1	The time span of each sample for controller mutations quotas
client.quota.callback.class	(none)	The fully qualified name of a class that implements the ClientQuotaCallback interface, which is used to determine quota limits applied to client requests. By default, the &lt;user&gt; and &lt;client-id&gt; quotas that are stored in ZooKeeper are applied. For any given request, the most specific quota that matches the user principal of the session and the client-id of the request is applied.
connections.max.reauth.ms	0	When explicitly set to a positive number (the default is 0, not a positive number), a session lifetime that will not exceed the configured value will be communicated to v2.2.0 or later clients when they authenticate. The broker will disconnect any such connection that is not re-authenticated within the session lifetime and that is then subsequently used for any purpose other than re-authentication. Configuration names can optionally be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.oauthbearer.connections.max.reauth.ms=3600000
sasl.server.max.receive.size	524288	The maximum receive size allowed before and during initial SASL authentication. Default receive size is 512KB. GSSAPI limits requests to 64K, but we allow upto 512KB by default for custom SASL mechanisms. In practice, PLAIN, SCRAM and OAUTH mechanisms can use much smaller limits.
security.providers	(none)	A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the <code>org.apache.kafka.common.security.auth.SecurityProviderCreator</code> interface.
principal.builder.class	class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder	The fully qualified name of a class that implements the KafkaPrincipalBuilder interface, which is used to build the KafkaPrincipal object used during authorization. If no principal builder is defined, the default behavior depends on the security protocol in use. For SSL authentication,  the principal will be derived using the rules defined by <code>ssl.principal.mapping.rules</code> applied on the distinguished name from the client certificate if one is provided; otherwise, if client authentication is not required, the principal name will be ANONYMOUS. For SASL authentication, the principal will be derived using the rules defined by <code>sasl.kerberos.principal.to.local.rules</code> if GSSAPI is in use, and the SASL authentication ID for other mechanisms. For PLAINTEXT, the principal will be ANONYMOUS.
ssl.protocol	TLSv1.3	The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.
ssl.provider	(none)	The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.
ssl.enabled.protocols	[TLSv1.2, TLSv1.3]	The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for `ssl.protocol`.
ssl.keystore.type	JKS	The file format of the key store file. This is optional for client. The values currently supported by the default `ssl.engine.factory.class` are [JKS, PKCS12, PEM].
ssl.keystore.location	(none)	The location of the key store file. This is optional for client and can be used for two-way authentication for client.
ssl.keystore.password	(none)	The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.
ssl.key.password	(none)	The password of the private key in the key store file or the PEM key specified in `ssl.keystore.key'.
ssl.keystore.key	(none)	Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'
ssl.keystore.certificate.chain	(none)	Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates
ssl.truststore.type	JKS	The file format of the trust store file. The values currently supported by the default `ssl.engine.factory.class` are [JKS, PKCS12, PEM].
ssl.truststore.location	(none)	The location of the trust store file.
ssl.truststore.password	(none)	The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.
ssl.truststore.certificates	(none)	Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.
ssl.keymanager.algorithm	SunX509	The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.
ssl.trustmanager.algorithm	PKIX	The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.
ssl.endpoint.identification.algorithm	https	The endpoint identification algorithm to validate server hostname using server certificate.
ssl.secure.random.implementation	(none)	The SecureRandom PRNG implementation to use for SSL cryptography operations.
ssl.client.auth	none	Configures kafka broker to request client authentication. The following settings are common:  <ul> <li><code>ssl.client.auth=required</code> If set to required client authentication is required. <li><code>ssl.client.auth=requested</code> This means client authentication is optional. unlike required, if this option is set client can choose not to provide authentication information about itself <li><code>ssl.client.auth=none</code> This means client authentication is not needed.</ul>
ssl.cipher.suites	[]	A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.
ssl.principal.mapping.rules	DEFAULT	A list of rules for mapping from distinguished name from the client certificate to short name. The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default, distinguished name of the X.500 certificate will be the principal. For more details on the format please see <a href="#security_authz"> security authorization and acls</a>. Note that this configuration is ignored if an extension of KafkaPrincipalBuilder is provided by the <code>principal.builder.class</code> configuration.
ssl.engine.factory.class	(none)	The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory
sasl.mechanism.inter.broker.protocol	GSSAPI	SASL mechanism used for inter-broker communication. Default is GSSAPI.
sasl.jaas.config	(none)	JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html">here</a>. The format for the value is: <code>loginModuleClass controlFlag (optionName=optionValue)*;</code>. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;
sasl.enabled.mechanisms	[GSSAPI]	The list of SASL mechanisms enabled in the Kafka server. The list may contain any mechanism for which a security provider is available. Only GSSAPI is enabled by default.
sasl.server.callback.handler.class	(none)	The fully qualified name of a SASL server callback handler class that implements the AuthenticateCallbackHandler interface. Server callback handlers must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.plain.sasl.server.callback.handler.class=com.example.CustomPlainCallbackHandler.
sasl.client.callback.handler.class	(none)	The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.
sasl.login.class	(none)	The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin
sasl.login.callback.handler.class	(none)	The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler
sasl.kerberos.service.name	(none)	The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.
sasl.kerberos.kinit.cmd	/usr/bin/kinit	Kerberos kinit command path.
sasl.kerberos.ticket.renew.window.factor	0.8	Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.
sasl.kerberos.ticket.renew.jitter	0.05	Percentage of random jitter added to the renewal time.
sasl.kerberos.min.time.before.relogin	60000	Login thread sleep time between refresh attempts.
sasl.kerberos.principal.to.local.rules	[DEFAULT]	A list of rules for mapping from principal names to short names (typically operating system usernames). The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default, principal names of the form {username}/{hostname}@{REALM} are mapped to {username}. For more details on the format please see <a href="#security_authz"> security authorization and acls</a>. Note that this configuration is ignored if an extension of KafkaPrincipalBuilder is provided by the <code>principal.builder.class</code> configuration.
sasl.login.refresh.window.factor	0.8	Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.
sasl.login.refresh.window.jitter	0.05	The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.
sasl.login.refresh.min.period.seconds	60	The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified.  This value and  sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.
sasl.login.refresh.buffer.seconds	300	The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of  300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.
sasl.login.connect.timeout.ms	(none)	The (optional) value in milliseconds for the external authentication provider connection timeout. Currently applies only to OAUTHBEARER.
sasl.login.read.timeout.ms	(none)	The (optional) value in milliseconds for the external authentication provider read timeout. Currently applies only to OAUTHBEARER.
sasl.login.retry.backoff.max.ms	10000	The (optional) value in milliseconds for the maximum wait between login attempts to the external authentication provider. Login uses an exponential backoff algorithm with an initial wait based on the sasl.login.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.login.retry.backoff.max.ms setting. Currently applies only to OAUTHBEARER.
sasl.login.retry.backoff.ms	100	The (optional) value in milliseconds for the initial wait between login attempts to the external authentication provider. Login uses an exponential backoff algorithm with an initial wait based on the sasl.login.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.login.retry.backoff.max.ms setting. Currently applies only to OAUTHBEARER.
sasl.oauthbearer.scope.claim.name	scope	The OAuth claim for the scope is often named "scope", but this (optional) setting can provide a different name to use for the scope included in the JWT payload's claims if the OAuth/OIDC provider uses a different name for that claim.
sasl.oauthbearer.sub.claim.name	sub	The OAuth claim for the subject is often named "sub", but this (optional) setting can provide a different name to use for the subject included in the JWT payload's claims if the OAuth/OIDC provider uses a different name for that claim.
sasl.oauthbearer.token.endpoint.url	(none)	The URL for the OAuth/OIDC identity provider. If the URL is HTTP(S)-based, it is the issuer's token endpoint URL to which requests will be made to login based on the configuration in sasl.jaas.config. If the URL is file-based, it specifies a file containing an access token (in JWT serialized form) issued by the OAuth/OIDC identity provider to use for authorization.
sasl.oauthbearer.jwks.endpoint.url	(none)	The OAuth/OIDC provider URL from which the provider's <a href="https://datatracker.ietf.org/doc/html/rfc7517#section-5">JWKS (JSON Web Key Set)</a> can be retrieved. The URL can be HTTP(S)-based or file-based. If the URL is HTTP(S)-based, the JWKS data will be retrieved from the OAuth/OIDC provider via the configured URL on broker startup. All then-current keys will be cached on the broker for incoming requests. If an authentication request is received for a JWT that includes a "kid" header claim value that isn't yet in the cache, the JWKS endpoint will be queried again on demand. However, the broker polls the URL every sasl.oauthbearer.jwks.endpoint.refresh.ms milliseconds to refresh the cache with any forthcoming keys before any JWT requests that include them are received. If the URL is file-based, the broker will load the JWKS file from a configured location on startup. In the event that the JWT includes a "kid" header value that isn't in the JWKS file, the broker will reject the JWT and authentication will fail.
sasl.oauthbearer.jwks.endpoint.refresh.ms	3600000	The (optional) value in milliseconds for the broker to wait between refreshing its JWKS (JSON Web Key Set) cache that contains the keys to verify the signature of the JWT.
sasl.oauthbearer.jwks.endpoint.retry.backoff.ms	100	The (optional) value in milliseconds for the initial wait between JWKS (JSON Web Key Set) retrieval attempts from the external authentication provider. JWKS retrieval uses an exponential backoff algorithm with an initial wait based on the sasl.oauthbearer.jwks.endpoint.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms setting.
sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms	10000	The (optional) value in milliseconds for the maximum wait between attempts to retrieve the JWKS (JSON Web Key Set) from the external authentication provider. JWKS retrieval uses an exponential backoff algorithm with an initial wait based on the sasl.oauthbearer.jwks.endpoint.retry.backoff.ms setting and will double in wait length between attempts up to a maximum wait length specified by the sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms setting.
sasl.oauthbearer.clock.skew.seconds	30	The (optional) value in seconds to allow for differences between the time of the OAuth/OIDC identity provider and the broker.
sasl.oauthbearer.expected.audience	(none)	The (optional) comma-delimited setting for the broker to use to verify that the JWT was issued for one of the expected audiences. The JWT will be inspected for the standard OAuth "aud" claim and if this value is set, the broker will match the value from JWT's "aud" claim  to see if there is an exact match. If there is no match, the broker will reject the JWT and authentication will fail.
sasl.oauthbearer.expected.issuer	(none)	The (optional) setting for the broker to use to verify that the JWT was created by the expected issuer. The JWT will be inspected for the standard OAuth "iss" claim and if this value is set, the broker will match it exactly against what is in the JWT's "iss" claim. If there is no match, the broker will reject the JWT and authentication will fail.
delegation.token.master.key	(none)	DEPRECATED: An alias for delegation.token.secret.key, which should be used instead of this config.
delegation.token.secret.key	(none)	Secret key to generate and verify delegation tokens. The same key must be configured across all the brokers.  If the key is not set or set to empty string, brokers will disable the delegation token support.
delegation.token.max.lifetime.ms	604800000	The token has a maximum lifetime beyond which it cannot be renewed anymore. Default value 7 days.
delegation.token.expiry.time.ms	86400000	The token validity time in miliseconds before the token needs to be renewed. Default value 1 day.
delegation.token.expiry.check.interval.ms	3600000	Scan interval to remove expired delegation tokens.
password.encoder.secret	(none)	The secret used for encoding dynamically configured passwords for this broker.
password.encoder.old.secret	(none)	The old secret that was used for encoding dynamically configured passwords. This is required only when the secret is updated. If specified, all dynamically encoded passwords are decoded using this old secret and re-encoded using password.encoder.secret when broker starts up.
password.encoder.keyfactory.algorithm	(none)	The SecretKeyFactory algorithm used for encoding dynamically configured passwords. Default is PBKDF2WithHmacSHA512 if available and PBKDF2WithHmacSHA1 otherwise.
password.encoder.cipher.algorithm	AES/CBC/PKCS5Padding	The Cipher algorithm used for encoding dynamically configured passwords.
password.encoder.key.length	128	The key length used for encoding dynamically configured passwords.
password.encoder.iterations	4096	The iteration count used for encoding dynamically configured passwords.
controller.quorum.voters	[]	Map of id/endpoint information for the set of voters in a comma-separated list of `{id}@{host}:{port}` entries. For example: `1@localhost:9092,2@localhost:9093,3@localhost:9094`
controller.quorum.election.timeout.ms	1000	Maximum time in milliseconds to wait without being able to fetch from the leader before triggering a new election
controller.quorum.fetch.timeout.ms	2000	Maximum time without a successful fetch from the current leader before becoming a candidate and triggering an election for voters; Maximum time without receiving fetch from a majority of the quorum before asking around to see if there's a new epoch for leader
controller.quorum.election.backoff.max.ms	1000	Maximum time in milliseconds before starting new elections. This is used in the binary exponential backoff mechanism that helps prevent gridlocked elections
controller.quorum.append.linger.ms	25	The duration in milliseconds that the leader will wait for writes to accumulate before flushing them to disk.
controller.quorum.request.timeout.ms	2000	The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.
controller.quorum.retry.backoff.ms	20	The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.
remote.log.storage.system.enable	false	Whether to enable tier storage functionality in a broker or not. Valid values are `true` or `false` and the default value is false. When it is true broker starts all the services required for tiered storage functionality.
remote.log.storage.manager.impl.prefix	(none)	Prefix used for properties to be passed to RemoteStorageManager implementation. For example this value can be `rsm.s3.`.
remote.log.metadata.manager.impl.prefix	(none)	Prefix used for properties to be passed to RemoteLogMetadataManager implementation. For example this value can be `rlmm.s3.`.
remote.log.storage.manager.class.name	(none)	Fully qualified class name of `RemoteLogStorageManager` implementation.
remote.log.storage.manager.class.path	(none)	Class path of the `RemoteLogStorageManager` implementation.If specified, the RemoteLogStorageManager implementation and its dependent libraries will be loaded by a dedicatedclassloader which searches this class path before the Kafka broker class path. The syntax of this parameter is samewith the standard Java class path string.
remote.log.metadata.manager.class.name	(none)	Fully qualified class name of `RemoteLogMetadataManager` implementation.
remote.log.metadata.manager.class.path	(none)	Class path of the `RemoteLogMetadataManager` implementation.If specified, the RemoteLogMetadataManager implementation and its dependent libraries will be loaded by a dedicatedclassloader which searches this class path before the Kafka broker class path. The syntax of this parameter is samewith the standard Java class path string.
remote.log.metadata.manager.listener.name	(none)	Listener name of the local broker to which it should get connected if needed by RemoteLogMetadataManager implementation.
remote.log.index.file.cache.total.size.bytes	1073741824	The total size of the space allocated to store index files fetched from remote storage in the local storage.
remote.log.manager.thread.pool.size	10	Size of the thread pool used in scheduling tasks to copy segments, fetch remote log indexes and clean up remote log segments.
remote.log.manager.task.interval.ms	30000	Interval at which remote log manager runs the scheduled tasks like copy segments, and clean up remote log segments.
remote.log.manager.task.retry.backoff.ms	500	The initial amount of wait in milli seconds before the request is retried again.
remote.log.manager.task.retry.backoff.max.ms	30000	The maximum amount of time in milliseconds to wait when the request is retried again. The retry duration will increase exponentially for each request failure up to this maximum wait interval.
remote.log.manager.task.retry.jitter	0.2	The value used in defining the range for computing random jitter factor. It is applied to the effective exponential term for computing the resultant retry backoff interval. This will avoid thundering herds of requests. The default value is 0.2 and valid value should be between 0(inclusive) and 0.5(inclusive). For ex: remote.log.manager.task.retry.jitter = 0.25, then the range to compute random jitter will be [1-0.25, 1+0.25) viz [0.75, 1.25). So, jitter factor can be any random value with in that range.
remote.log.reader.threads	10	Size of the thread pool that is allocated for handling remote log reads.
remote.log.reader.max.pending.tasks	100	Maximum remote log reader thread pool task queue size. If the task queue is full, fetch requests are served with an error.
remote.log.storage.system.enable	false	Whether to enable tier storage functionality in a broker or not. Valid values are `true` or `false` and the default value is false. When it is true broker starts all the services required for tiered storage functionality.
remote.log.storage.manager.impl.prefix	(none)	Prefix used for properties to be passed to RemoteStorageManager implementation. For example this value can be `rsm.s3.`.
remote.log.metadata.manager.impl.prefix	(none)	Prefix used for properties to be passed to RemoteLogMetadataManager implementation. For example this value can be `rlmm.s3.`.
remote.log.storage.manager.class.name	(none)	Fully qualified class name of `RemoteLogStorageManager` implementation.
remote.log.storage.manager.class.path	(none)	Class path of the `RemoteLogStorageManager` implementation.If specified, the RemoteLogStorageManager implementation and its dependent libraries will be loaded by a dedicatedclassloader which searches this class path before the Kafka broker class path. The syntax of this parameter is samewith the standard Java class path string.
remote.log.metadata.manager.class.name	(none)	Fully qualified class name of `RemoteLogMetadataManager` implementation.
remote.log.metadata.manager.class.path	(none)	Class path of the `RemoteLogMetadataManager` implementation.If specified, the RemoteLogMetadataManager implementation and its dependent libraries will be loaded by a dedicatedclassloader which searches this class path before the Kafka broker class path. The syntax of this parameter is samewith the standard Java class path string.
remote.log.metadata.manager.listener.name	(none)	Listener name of the local broker to which it should get connected if needed by RemoteLogMetadataManager implementation.
remote.log.index.file.cache.total.size.bytes	1073741824	The total size of the space allocated to store index files fetched from remote storage in the local storage.
remote.log.manager.thread.pool.size	10	Size of the thread pool used in scheduling tasks to copy segments, fetch remote log indexes and clean up remote log segments.
remote.log.manager.task.interval.ms	30000	Interval at which remote log manager runs the scheduled tasks like copy segments, and clean up remote log segments.
remote.log.manager.task.retry.backoff.ms	500	The initial amount of wait in milli seconds before the request is retried again.
remote.log.manager.task.retry.backoff.max.ms	30000	The maximum amount of time in milliseconds to wait when the request is retried again. The retry duration will increase exponentially for each request failure up to this maximum wait interval.
remote.log.manager.task.retry.jitter	0.2	The value used in defining the range for computing random jitter factor. It is applied to the effective exponential term for computing the resultant retry backoff interval. This will avoid thundering herds of requests. The default value is 0.2 and valid value should be between 0(inclusive) and 0.5(inclusive). For ex: remote.log.manager.task.retry.jitter = 0.25, then the range to compute random jitter will be [1-0.25, 1+0.25) viz [0.75, 1.25). So, jitter factor can be any random value with in that range.
remote.log.reader.threads	10	Size of the thread pool that is allocated for handling remote log reads.
remote.log.reader.max.pending.tasks	100	Maximum remote log reader thread pool task queue size. If the task queue is full, fetch requests are served with an error.
segment.bytes	1073741824	This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over retention.
segment.ms	604800000	This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn't full to ensure that retention can delete or compact old data.
segment.jitter.ms	0	The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling
segment.index.bytes	10485760	This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.
flush.messages	9223372036854775807	This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system's background flush capabilities as it is more efficient. This setting can be overridden on a per-topic basis (see <a href="#topicconfigs">the per-topic configuration section</a>).
flush.ms	9223372036854775807	This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system's background flush capabilities as it is more efficient.
retention.bytes	-1	This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes.
retention.ms	604800000	This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
max.message.bytes	1048588	The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers' fetch size must also be increased so that they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.
index.interval.bytes	4096	This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don't need to change this.
delete.retention.ms	86400000	The amount of time to retain delete tombstone markers for <a href="#compaction">log compacted</a> topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).
min.compaction.lag.ms	0	The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
max.compaction.lag.ms	9223372036854775807	The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.
file.delete.delay.ms	60000	The time to wait before deleting a file from the filesystem
min.cleanable.dirty.ratio	0.5	This configuration controls how frequently the log compactor will attempt to clean the log (assuming <a href="#compaction">log compaction</a> is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.
cleanup.policy	[delete]	This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.
unclean.leader.election.enable	false	Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
min.insync.replicas	1	When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).<br>When used together, <code>min.insync.replicas</code> and <code>acks</code> allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set <code>min.insync.replicas</code> to 2, and produce with <code>acks</code> of "all". This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
compression.type	producer	Specify the final compression type for a given topic. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer' which means retain the original compression codec set by the producer.
preallocate	false	True if we should preallocate the file on disk when creating a new log segment.
message.format.version	3.0-IV1	[DEPRECATED] Specify the message format version the broker will use to append messages to the logs. The value of this config is always assumed to be `3.0` if `inter.broker.protocol.version` is 3.0 or higher (the actual config value is ignored). Otherwise, the value should be a valid ApiVersion. Some examples are: 0.10.0, 1.1, 2.8, 3.0. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don't understand.
message.timestamp.type	CreateTime	Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`
message.timestamp.difference.max.ms	9223372036854775807	The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime.
leader.replication.throttled.replicas	[]	A list of replicas for which log replication should be throttled on the leader side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard '*' can be used to throttle all replicas for this topic.
follower.replication.throttled.replicas	[]	A list of replicas for which log replication should be throttled on the follower side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard '*' can be used to throttle all replicas for this topic.
message.downconversion.enable	true	This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to <code>false</code>, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with <code>UNSUPPORTED_VERSION</code> error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers.
remote.storage.enable	false	To enable tier storage for a topic, set `remote.storage.enable` as true. You can not disable this config once it is enabled. It will be provided in future versions.
local.retention.ms	-2	The number of milli seconds to keep the local log segment before it gets deleted. Default value is -2, it represents `retention.ms` value is to be used. The effective value should always be less than or equal to `retention.ms` value.
local.retention.bytes	-2	The maximum size of local log segments that can grow for a partition before it deletes the old segments. Default value is -2, it represents `retention.bytes` value to be used. The effective value should always be less than or equal to `retention.bytes` value.