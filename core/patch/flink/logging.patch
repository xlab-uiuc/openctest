From 4231bde6788bc56f0f038c45c504d3cc8e8022a9 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Sat, 24 Sep 2022 20:09:01 -0500
Subject: [PATCH 1/9] initial get/set modified for ctest

---
 .../flink/configuration/Configuration.java    | 27 ++++++++++++++++---
 .../UnmodifiableConfiguration.java            |  3 ++-
 pom.xml                                       |  1 +
 3 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index d2032c606c4..054bd5ae1b3 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -727,7 +727,7 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     @Override
     public <T> Configuration set(ConfigOption<T> option, T value) {
         final boolean canBePrefixMap = canBePrefixMap(option);
-        setValueInternal(option.key(), value, canBePrefixMap);
+        setValueInternal(option.key(), value, canBePrefixMap);//ctest
         return this;
     }
 
@@ -765,9 +765,18 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         }
     }
 
+    //Ctest Get Trace
+    private String getStackTrace() {
+    String stacktrace = " ";
+    for (StackTraceElement e : Thread.currentThread().getStackTrace()) {
+      stacktrace = stacktrace.concat(
+          e.getClassName() + "#" + e.getMethodName() + "#" + e.getLineNumber() + "\t");
+    }
+    return stacktrace;
+  }
     // --------------------------------------------------------------------------------------------
 
-    <T> void setValueInternal(String key, T value, boolean canBePrefixMap) {
+    <T> void setValueInternal(String key, T value, boolean canBePrefixMap, boolean logenabled) {
         if (key == null) {
             throw new NullPointerException("Key must not be null.");
         }
@@ -779,12 +788,20 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
             if (canBePrefixMap) {
                 removePrefixMap(this.confData, key);
             }
+            if(logenabled){
+                LOG.warn("[CTEST][SET-PARAM] " + name + getStackTrace()); //ctest
+            }
             this.confData.put(key, value);
         }
     }
 
     private <T> void setValueInternal(String key, T value) {
-        setValueInternal(key, value, false);
+        setValueInternal(key, value, false, true);
+    }
+
+    //ctest
+    private <T> void setValueInternal(String key, T value, boolean canBePrefixMap) {//ctest
+        setValueInternal(key, value, canBePrefixMap, true);
     }
 
     private Optional<Object> getRawValue(String key) {
@@ -792,6 +809,7 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     }
 
     private Optional<Object> getRawValue(String key, boolean canBePrefixMap) {
+        String ctestParam = key;//ctest
         if (key == null) {
             throw new NullPointerException("Key must not be null.");
         }
@@ -799,13 +817,16 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
             if (!canBePrefixMap || valueFromExactKey != null) {
+                LOG.warn("[CTEST][GET-PARAM] " + ctestParam);//ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
+                LOG.warn("[CTEST][GET-PARAM] " + ctestParam);//ctest
                 return Optional.empty();
             }
+            LOG.warn("[CTEST][GET-PARAM] " + ctestParam); //ctest
             return Optional.of(valueFromPrefixMap);
         }
     }
diff --git a/flink-core/src/main/java/org/apache/flink/configuration/UnmodifiableConfiguration.java b/flink-core/src/main/java/org/apache/flink/configuration/UnmodifiableConfiguration.java
index eb04fa9fc80..779ee71155d 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/UnmodifiableConfiguration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/UnmodifiableConfiguration.java
@@ -59,7 +59,8 @@ public class UnmodifiableConfiguration extends Configuration {
     }
 
     @Override
-    final <T> void setValueInternal(String key, T value, boolean canBePrefixMap) {
+    final <T> void setValueInternal(
+            String key, T value, boolean canBePrefixMap, boolean logenabled) {
         error();
     }
 
diff --git a/pom.xml b/pom.xml
index 7d3718a4884..53f3b66bab9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -934,6 +934,7 @@ under the License.
 						<groupId>org.apache.maven.plugins</groupId>
 						<artifactId>maven-surefire-plugin</artifactId>
 						<configuration>
+              <reportFormat>plain</reportFormat>
 							<systemProperties>
 								<flink.tests.enable-adaptive-scheduler>true</flink.tests.enable-adaptive-scheduler>
 							</systemProperties>
-- 
2.25.1


From 7f9ea3c282e5fd8a2a0cd19e069c51e733f55970 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Sat, 24 Sep 2022 20:34:25 -0500
Subject: [PATCH 2/9] Modified get/set to pass maven check

---
 .../flink/configuration/Configuration.java    | 42 +++++++++++--------
 1 file changed, 24 insertions(+), 18 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index 054bd5ae1b3..994e349d01f 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -727,7 +727,7 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     @Override
     public <T> Configuration set(ConfigOption<T> option, T value) {
         final boolean canBePrefixMap = canBePrefixMap(option);
-        setValueInternal(option.key(), value, canBePrefixMap);//ctest
+        setValueInternal(option.key(), value, canBePrefixMap); // ctest
         return this;
     }
 
@@ -765,15 +765,21 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         }
     }
 
-    //Ctest Get Trace
+    // Ctest Get Trace
     private String getStackTrace() {
-    String stacktrace = " ";
-    for (StackTraceElement e : Thread.currentThread().getStackTrace()) {
-      stacktrace = stacktrace.concat(
-          e.getClassName() + "#" + e.getMethodName() + "#" + e.getLineNumber() + "\t");
+        String stacktrace = " ";
+        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {
+            stacktrace =
+                    stacktrace.concat(
+                            e.getClassName()
+                                    + "#"
+                                    + e.getMethodName()
+                                    + "#"
+                                    + e.getLineNumber()
+                                    + "\t");
+        }
+        return stacktrace;
     }
-    return stacktrace;
-  }
     // --------------------------------------------------------------------------------------------
 
     <T> void setValueInternal(String key, T value, boolean canBePrefixMap, boolean logenabled) {
@@ -783,24 +789,24 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         if (value == null) {
             throw new NullPointerException("Value must not be null.");
         }
-
+        String ctestParam = key; // ctest
         synchronized (this.confData) {
             if (canBePrefixMap) {
                 removePrefixMap(this.confData, key);
             }
-            if(logenabled){
-                LOG.warn("[CTEST][SET-PARAM] " + name + getStackTrace()); //ctest
+            if (logenabled) {
+                LOG.warn("[CTEST][SET-PARAM] " + ctestParam + getStackTrace()); // ctest
             }
             this.confData.put(key, value);
         }
     }
 
-    private <T> void setValueInternal(String key, T value) {
+    public <T> void setValueInternal(String key, T value) {
         setValueInternal(key, value, false, true);
     }
 
-    //ctest
-    private <T> void setValueInternal(String key, T value, boolean canBePrefixMap) {//ctest
+    // ctest
+    public <T> void setValueInternal(String key, T value, boolean canBePrefixMap) { // ctest
         setValueInternal(key, value, canBePrefixMap, true);
     }
 
@@ -809,7 +815,7 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     }
 
     private Optional<Object> getRawValue(String key, boolean canBePrefixMap) {
-        String ctestParam = key;//ctest
+        String ctestParam = key; // ctest
         if (key == null) {
             throw new NullPointerException("Key must not be null.");
         }
@@ -817,16 +823,16 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
             if (!canBePrefixMap || valueFromExactKey != null) {
-                LOG.warn("[CTEST][GET-PARAM] " + ctestParam);//ctest
+                LOG.warn("[CTEST][GET-PARAM] " + ctestParam); // ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
-                LOG.warn("[CTEST][GET-PARAM] " + ctestParam);//ctest
+                LOG.warn("[CTEST][GET-PARAM] " + ctestParam); // ctest
                 return Optional.empty();
             }
-            LOG.warn("[CTEST][GET-PARAM] " + ctestParam); //ctest
+            LOG.warn("[CTEST][GET-PARAM] " + ctestParam); // ctest
             return Optional.of(valueFromPrefixMap);
         }
     }
-- 
2.25.1


From a5f99cd5e77e9a6ca914ac470a33256dc8a8367d Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Sun, 25 Sep 2022 23:02:28 -0500
Subject: [PATCH 3/9] get bug fixed

---
 .../java/org/apache/flink/configuration/Configuration.java    | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index 994e349d01f..dbfa165587a 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -801,12 +801,12 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         }
     }
 
-    public <T> void setValueInternal(String key, T value) {
+    private <T> void setValueInternal(String key, T value) {
         setValueInternal(key, value, false, true);
     }
 
     // ctest
-    public <T> void setValueInternal(String key, T value, boolean canBePrefixMap) { // ctest
+    private <T> void setValueInternal(String key, T value, boolean canBePrefixMap) { // ctest
         setValueInternal(key, value, canBePrefixMap, true);
     }
 
-- 
2.25.1


From ddf0ed64e72a00ce199c5bb3a9536ca86722a2b4 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Mon, 26 Sep 2022 00:21:42 -0500
Subject: [PATCH 4/9] Illegal access fixed

---
 .../org/apache/flink/configuration/Configuration.java     | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index dbfa165587a..2282427f4f0 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -806,7 +806,7 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     }
 
     // ctest
-    private <T> void setValueInternal(String key, T value, boolean canBePrefixMap) { // ctest
+    <T> void setValueInternal(String key, T value, boolean canBePrefixMap) { // ctest
         setValueInternal(key, value, canBePrefixMap, true);
     }
 
@@ -823,16 +823,16 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
             if (!canBePrefixMap || valueFromExactKey != null) {
-                LOG.warn("[CTEST][GET-PARAM] " + ctestParam); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
-                LOG.warn("[CTEST][GET-PARAM] " + ctestParam); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
                 return Optional.empty();
             }
-            LOG.warn("[CTEST][GET-PARAM] " + ctestParam); // ctest
+            LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
             return Optional.of(valueFromPrefixMap);
         }
     }
-- 
2.25.1


From cc1f1ea2b319adc19834e5083d0459ac5e3e65c1 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Tue, 27 Sep 2022 23:53:05 -0500
Subject: [PATCH 5/9] surefire Config change

---
 pom.xml | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/pom.xml b/pom.xml
index 53f3b66bab9..003854017b0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -934,7 +934,7 @@ under the License.
 						<groupId>org.apache.maven.plugins</groupId>
 						<artifactId>maven-surefire-plugin</artifactId>
 						<configuration>
-              <reportFormat>plain</reportFormat>
+              			<reportFormat>plain</reportFormat>
 							<systemProperties>
 								<flink.tests.enable-adaptive-scheduler>true</flink.tests.enable-adaptive-scheduler>
 							</systemProperties>
@@ -1612,7 +1612,7 @@ under the License.
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-surefire-plugin</artifactId>
-				<version>3.0.0-M5</version>
+				<version>3.0.0-M4</version>
 				<configuration>
 					<!-- enables TCP/IP communication between surefire and forked JVM-->
 					<forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>
@@ -1648,6 +1648,7 @@ under the License.
 						<!-- automatically adjust parallelism based on available cpu/processor cores-->
 						<junit.jupiter.execution.parallel.config.strategy>dynamic</junit.jupiter.execution.parallel.config.strategy>
 					</systemPropertyVariables>
+					<reportFormat>plain</reportFormat>
 				</configuration>
 				<executions>
 					<!--execute all the unit tests-->
-- 
2.25.1


From 9910aba650c958b300129e8653dcc5346d113ef8 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Fri, 30 Sep 2022 03:24:14 -0500
Subject: [PATCH 6/9] logging config fixed

---
 .../org/apache/flink/configuration/Configuration.java    | 9 ++++++---
 flink-core/src/test/resources/log4j2-test.properties     | 2 +-
 pom.xml                                                  | 5 +++--
 3 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index 2282427f4f0..f01309a2425 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -789,11 +789,13 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         if (value == null) {
             throw new NullPointerException("Value must not be null.");
         }
-        String ctestParam = key; // ctest
         synchronized (this.confData) {
             if (canBePrefixMap) {
                 removePrefixMap(this.confData, key);
             }
+            final Object valueFromExactKey = this.confData.get(key);
+            String ctestParam =
+                    valueFromExactKey == null ? "" : valueFromExactKey.toString(); // ctest
             if (logenabled) {
                 LOG.warn("[CTEST][SET-PARAM] " + ctestParam + getStackTrace()); // ctest
             }
@@ -815,7 +817,6 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     }
 
     private Optional<Object> getRawValue(String key, boolean canBePrefixMap) {
-        String ctestParam = key; // ctest
         if (key == null) {
             throw new NullPointerException("Key must not be null.");
         }
@@ -823,15 +824,17 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
             if (!canBePrefixMap || valueFromExactKey != null) {
+                String ctestParam = valueFromExactKey == null ? "" : valueFromExactKey.toString();
                 LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
-                LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + "" + getStackTrace()); // ctest
                 return Optional.empty();
             }
+            String ctestParam = valueFromPrefixMap.toString(); // ctest
             LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
             return Optional.of(valueFromPrefixMap);
         }
diff --git a/flink-core/src/test/resources/log4j2-test.properties b/flink-core/src/test/resources/log4j2-test.properties
index 3a8b6f23dc3..193c191ff6f 100644
--- a/flink-core/src/test/resources/log4j2-test.properties
+++ b/flink-core/src/test/resources/log4j2-test.properties
@@ -18,7 +18,7 @@
 
 # Set root logger level to OFF to not flood build logs
 # set manually to INFO for debugging purposes
-rootLogger.level=OFF
+rootLogger.level=INFO
 rootLogger.appenderRef.test.ref = TestLogger
 
 appender.testlogger.name = TestLogger
diff --git a/pom.xml b/pom.xml
index 003854017b0..4d76c7452e1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -119,9 +119,9 @@ under the License.
 		<!-- Number of forkCounts for ITCase and UnitTest should take into account allocated memory
 			 to the jvm (-Xmx) and the available memory on the machine running the test -->
 		<flink.forkCountITCase>2</flink.forkCountITCase>
-		<flink.forkCountUnitTest>4</flink.forkCountUnitTest>
+		<flink.forkCountUnitTest>1</flink.forkCountUnitTest>
 		<flink.reuseForks>true</flink.reuseForks>
-		<flink.surefire.baseArgLine>-XX:+UseG1GC -Xms256m</flink.surefire.baseArgLine>
+		<flink.surefire.baseArgLine>-XX:+UseG1GC -Xms512m</flink.surefire.baseArgLine>
 		<flink.shaded.version>15.0</flink.shaded.version>
 		<flink.shaded.jackson.version>2.12.4</flink.shaded.jackson.version>
 		<target.java.version>1.8</target.java.version>
@@ -1649,6 +1649,7 @@ under the License.
 						<junit.jupiter.execution.parallel.config.strategy>dynamic</junit.jupiter.execution.parallel.config.strategy>
 					</systemPropertyVariables>
 					<reportFormat>plain</reportFormat>
+					<redirectTestOutputToFile>true</redirectTestOutputToFile>
 				</configuration>
 				<executions>
 					<!--execute all the unit tests-->
-- 
2.25.1


From e6be40fa3142ad285dbef353b8b9af7df9c1eed2 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Fri, 30 Sep 2022 13:19:29 -0500
Subject: [PATCH 7/9] GET-SET PARAM Fixed

---
 .../org/apache/flink/configuration/Configuration.java | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index f01309a2425..581b32dc69e 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -794,10 +794,8 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
                 removePrefixMap(this.confData, key);
             }
             final Object valueFromExactKey = this.confData.get(key);
-            String ctestParam =
-                    valueFromExactKey == null ? "" : valueFromExactKey.toString(); // ctest
             if (logenabled) {
-                LOG.warn("[CTEST][SET-PARAM] " + ctestParam + getStackTrace()); // ctest
+                LOG.warn("[CTEST][SET-PARAM] " + key + getStackTrace()); // ctest
             }
             this.confData.put(key, value);
         }
@@ -824,18 +822,17 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
             if (!canBePrefixMap || valueFromExactKey != null) {
-                String ctestParam = valueFromExactKey == null ? "" : valueFromExactKey.toString();
-                LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + key + getStackTrace()); // ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
-                LOG.warn("[CTEST][GET-PARAM] " + "" + getStackTrace()); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + key + getStackTrace()); // ctest
                 return Optional.empty();
             }
             String ctestParam = valueFromPrefixMap.toString(); // ctest
-            LOG.warn("[CTEST][GET-PARAM] " + ctestParam + getStackTrace()); // ctest
+            LOG.warn("[CTEST][GET-PARAM] " + key + getStackTrace()); // ctest
             return Optional.of(valueFromPrefixMap);
         }
     }
-- 
2.25.1


From c5ce284da4d9ca2655a2d58dc6c276dbad39c2c5 Mon Sep 17 00:00:00 2001
From: ych10 <jessicahuang29@gmail.com>
Date: Tue, 4 Oct 2022 17:18:31 -0500
Subject: [PATCH 8/9] remove getStackTrace from GET logs

---
 .../java/org/apache/flink/configuration/Configuration.java | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index 581b32dc69e..7f23520a1bc 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -822,17 +822,16 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
             if (!canBePrefixMap || valueFromExactKey != null) {
-                LOG.warn("[CTEST][GET-PARAM] " + key + getStackTrace()); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
-                LOG.warn("[CTEST][GET-PARAM] " + key + getStackTrace()); // ctest
+                LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
                 return Optional.empty();
             }
-            String ctestParam = valueFromPrefixMap.toString(); // ctest
-            LOG.warn("[CTEST][GET-PARAM] " + key + getStackTrace()); // ctest
+            LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
             return Optional.of(valueFromPrefixMap);
         }
     }
-- 
2.25.1


From f86833a2cd4fb69da81b555682413ad52d180d06 Mon Sep 17 00:00:00 2001
From: yifanj4 <yifanj4@fa22-cs527-024.cs.illinois.edu>
Date: Sat, 8 Oct 2022 19:52:56 -0500
Subject: [PATCH 9/9] getstacktrace restored and testcase modified

---
 .../apache/flink/configuration/Configuration.java   | 13 ++-----------
 .../flink/configuration/ConfigurationTest.java      |  4 ++--
 2 files changed, 4 insertions(+), 13 deletions(-)

diff --git a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
index 7f23520a1bc..3064a20c58e 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/Configuration.java
@@ -769,14 +769,7 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
     private String getStackTrace() {
         String stacktrace = " ";
         for (StackTraceElement e : Thread.currentThread().getStackTrace()) {
-            stacktrace =
-                    stacktrace.concat(
-                            e.getClassName()
-                                    + "#"
-                                    + e.getMethodName()
-                                    + "#"
-                                    + e.getLineNumber()
-                                    + "\t");
+            stacktrace = stacktrace.concat(e.getClassName() + "\t");
         }
         return stacktrace;
     }
@@ -821,17 +814,15 @@ public class Configuration extends ExecutionConfig.GlobalJobParameters
 
         synchronized (this.confData) {
             final Object valueFromExactKey = this.confData.get(key);
+            LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
             if (!canBePrefixMap || valueFromExactKey != null) {
-                LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
                 return Optional.ofNullable(valueFromExactKey);
             }
             final Map<String, String> valueFromPrefixMap =
                     convertToPropertiesPrefixed(confData, key);
             if (valueFromPrefixMap.isEmpty()) {
-                LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
                 return Optional.empty();
             }
-            LOG.warn("[CTEST][GET-PARAM] " + key); // ctest
             return Optional.of(valueFromPrefixMap);
         }
     }
diff --git a/flink-core/src/test/java/org/apache/flink/configuration/ConfigurationTest.java b/flink-core/src/test/java/org/apache/flink/configuration/ConfigurationTest.java
index cd8ca26ae5e..5b9a5dc2d42 100644
--- a/flink-core/src/test/java/org/apache/flink/configuration/ConfigurationTest.java
+++ b/flink-core/src/test/java/org/apache/flink/configuration/ConfigurationTest.java
@@ -79,7 +79,7 @@ public class ConfigurationTest extends TestLogger {
             orig.setFloat("PI", 3.1415926f);
             orig.setDouble("E", Math.E);
             orig.setBoolean("shouldbetrue", true);
-            orig.setBytes("bytes sequence", new byte[] {1, 2, 3, 4, 5});
+            orig.setBytes("bytes_sequence", new byte[] {1, 2, 3, 4, 5});
             orig.setClass("myclass", this.getClass());
 
             final Configuration copy = InstantiationUtil.createCopyWritable(orig);
@@ -89,7 +89,7 @@ public class ConfigurationTest extends TestLogger {
             assertEquals(3.1415926f, copy.getFloat("PI", 3.1415926f), 0.0);
             assertEquals(Math.E, copy.getDouble("E", 0.0), 0.0);
             assertEquals(true, copy.getBoolean("shouldbetrue", false));
-            assertArrayEquals(new byte[] {1, 2, 3, 4, 5}, copy.getBytes("bytes sequence", null));
+            assertArrayEquals(new byte[] {1, 2, 3, 4, 5}, copy.getBytes("bytes_sequence", null));
             assertEquals(getClass(), copy.getClass("myclass", null, getClass().getClassLoader()));
 
             assertEquals(orig, copy);
-- 
2.25.1

