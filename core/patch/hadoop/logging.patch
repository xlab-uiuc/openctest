diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
index 24df9481..6451a97d 100755
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
@@ -1196,6 +1196,14 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
                                     + MAX_SUBST + " " + expr);
   }
   
+  private String getStackTrace() {
+    String stacktrace = " ";
+    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+      stacktrace = stacktrace.concat(element.getClassName() + "\t");
+    }
+    return stacktrace;
+  }
+
   String getenv(String name) {
     return System.getenv(name);
   }
@@ -1220,11 +1228,14 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
    *         or null if no such property exists.
    */
   public String get(String name) {
+    String ctestParam = name; //CTEST
     String[] names = handleDeprecation(deprecationContext.get(), name);
     String result = null;
     for(String n : names) {
+      ctestParam = n; //CTEST
       result = substituteVars(getProps().getProperty(n));
     }
+    LOG.warn("[CTEST][GET-PARAM] " + ctestParam); //CTEST
     return result;
   }
 
@@ -1312,11 +1323,14 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
    *         its replacing property and null if no such property exists.
    */
   public String getRaw(String name) {
+    String ctestParam = name; //CTEST
     String[] names = handleDeprecation(deprecationContext.get(), name);
     String result = null;
     for(String n : names) {
+      ctestParam = n; //CTEST
       result = getProps().getProperty(n);
     }
+    LOG.warn("[CTEST][GET-PARAM] " + ctestParam); //CTEST
     return result;
   }
 
@@ -1364,6 +1378,10 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
     set(name, value, null);
   }
   
+  public void set(String name, String value, String source) {
+    set(name, value, source, true);
+  }
+
   /** 
    * Set the <code>value</code> of the <code>name</code> property. If 
    * <code>name</code> is deprecated, it also sets the <code>value</code> to
@@ -1376,7 +1394,7 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
    * (For debugging).
    * @throws IllegalArgumentException when the value or name is null.
    */
-  public void set(String name, String value, String source) {
+  public void set(String name, String value, String source, boolean log_enabled) {
     Preconditions.checkArgument(
         name != null,
         "Property name must not be null");
@@ -1388,6 +1406,7 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
     if (deprecations.getDeprecatedKeyMap().isEmpty()) {
       getProps();
     }
+    if(log_enabled) LOG.warn("[CTEST][SET-PARAM] " + name + getStackTrace()); //CTEST
     getOverlay().setProperty(name, value);
     getProps().setProperty(name, value);
     String newSource = (source == null ? "programmatically" : source);
@@ -1398,6 +1417,7 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
       if(altNames != null) {
         for(String n: altNames) {
           if(!n.equals(name)) {
+            if(log_enabled) LOG.warn("[CTEST][SET-PARAM] " + n + getStackTrace()); //CTEST
             getOverlay().setProperty(n, value);
             getProps().setProperty(n, value);
             putIntoUpdatingResource(n, new String[] {newSource});
@@ -1409,6 +1429,7 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
       String[] names = handleDeprecation(deprecationContext.get(), name);
       String altSource = "because " + name + " is deprecated";
       for(String n : names) {
+        if(log_enabled) LOG.warn("[CTEST][SET-PARAM] " + n + getStackTrace()); //CTEST
         getOverlay().setProperty(n, value);
         getProps().setProperty(n, value);
         putIntoUpdatingResource(n, new String[] {altSource});
@@ -1481,11 +1502,14 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
    *         doesn't exist.                    
    */
   public String get(String name, String defaultValue) {
+    String ctestParam = name; //CTEST
     String[] names = handleDeprecation(deprecationContext.get(), name);
     String result = null;
     for(String n : names) {
+      ctestParam = n; //CTEST
       result = substituteVars(getProps().getProperty(n, defaultValue));
     }
+    LOG.warn("[CTEST][GET-PARAM] " + ctestParam); //CTEST
     return result;
   }
 
