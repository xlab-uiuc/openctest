From a94a3030433bae4e76f735047ab97368380a3689 Mon Sep 17 00:00:00 2001
From: Yang Jiang <jyang96069@gmail.com>
Date: Thu, 8 Dec 2022 11:27:03 -0600
Subject: [PATCH] ctest logging

---
 dropwizard-health/pom.xml                     | 15 ++++++++
 .../health/DefaultHealthFactory.java          | 26 ++++++++++++++
 .../health/HealthCheckConfiguration.java      | 30 ++++++++++++++++
 .../java/io/dropwizard/health/Schedule.java   | 35 +++++++++++++++++++
 .../ServletHealthResponderFactory.java        | 23 ++++++++++++
 5 files changed, 129 insertions(+)

diff --git a/dropwizard-health/pom.xml b/dropwizard-health/pom.xml
index 0c6014427..51671e085 100644
--- a/dropwizard-health/pom.xml
+++ b/dropwizard-health/pom.xml
@@ -162,4 +162,19 @@
             <scope>test</scope>
         </dependency>
     </dependencies>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>3.0.0-M4</version>
+                <configuration>
+                    <parallel>classes</parallel>
+                    <threadCount>2</threadCount>
+                    <perCoreThreadCount>true</perCoreThreadCount>
+                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
 </project>
diff --git a/dropwizard-health/src/main/java/io/dropwizard/health/DefaultHealthFactory.java b/dropwizard-health/src/main/java/io/dropwizard/health/DefaultHealthFactory.java
index 2f69ee58b..3d3b99dd2 100644
--- a/dropwizard-health/src/main/java/io/dropwizard/health/DefaultHealthFactory.java
+++ b/dropwizard-health/src/main/java/io/dropwizard/health/DefaultHealthFactory.java
@@ -36,6 +36,8 @@ public class DefaultHealthFactory implements HealthFactory {
 
     private static final String DEFAULT_BASE_NAME = "health-check";
     private static final String DEFAULT_PATH = "/health-check";
+    private static final String CTEST_GET_PARAM_FORMAT = "[CTEST][GET-PARAM] health.{}";
+    private static final String CTEST_SET_PARAM_FORMAT = "[CTEST][SET-PARAM] health.{}";
 
     @JsonProperty
     private boolean enabled = true;
@@ -69,11 +71,23 @@ public class DefaultHealthFactory implements HealthFactory {
     @JsonProperty("responder")
     private HealthResponderFactory healthResponderFactory = new ServletHealthResponderFactory();
 
+    private String getStackTrace() {
+        String stacktrace = " ";
+        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+            stacktrace = stacktrace.concat(element.getClassName() + "\t");
+        }
+        return stacktrace;
+    }
+
     public boolean isEnabled() {
+        String ctestParam = "enabled";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return enabled;
     }
 
     public void setEnabled(boolean enabled) {
+        String ctestParam = "enabled";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.enabled = enabled;
     }
 
@@ -88,26 +102,38 @@ public class DefaultHealthFactory implements HealthFactory {
     }
 
     public boolean isInitialOverallState() {
+        String ctestParam = "initialOverallState";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return initialOverallState;
     }
 
     public void setInitialOverallState(boolean initialOverallState) {
+        String ctestParam = "initialOverallState";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.initialOverallState = initialOverallState;
     }
 
     public boolean isDelayedShutdownHandlerEnabled() {
+        String ctestParam = "delayedShutdownHandlerEnabled";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return delayedShutdownHandlerEnabled;
     }
 
     public void setDelayedShutdownHandlerEnabled(final boolean delayedShutdownHandlerEnabled) {
+        String ctestParam = "delayedShutdownHandlerEnabled";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.delayedShutdownHandlerEnabled = delayedShutdownHandlerEnabled;
     }
 
     public Duration getShutdownWaitPeriod() {
+        String ctestParam = "shutdownWaitPeriod";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return shutdownWaitPeriod;
     }
 
     public void setShutdownWaitPeriod(final Duration shutdownWaitPeriod) {
+        String ctestParam = "shutdownWaitPeriod";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.shutdownWaitPeriod = shutdownWaitPeriod;
     }
 
diff --git a/dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckConfiguration.java b/dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckConfiguration.java
index 24b686e53..a8cf12076 100644
--- a/dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckConfiguration.java
+++ b/dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckConfiguration.java
@@ -5,8 +5,14 @@ import com.fasterxml.jackson.annotation.JsonProperty;
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Size;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class HealthCheckConfiguration {
+    private static final Logger LOGGER = LoggerFactory.getLogger(HealthCheckConfiguration.class);
+
+    private static final String CTEST_GET_PARAM_FORMAT = "[CTEST][GET-PARAM] health.healthChecks.{}";
+    private static final String CTEST_SET_PARAM_FORMAT = "[CTEST][SET-PARAM] health.healthChecks.{}";
 
     @NotNull
     @Size(min = 1)
@@ -28,35 +34,59 @@ public class HealthCheckConfiguration {
     @JsonProperty
     private Schedule schedule = new Schedule();
 
+    private String getStackTrace() {
+        String stacktrace = " ";
+        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+            stacktrace = stacktrace.concat(element.getClassName() + "\t");
+        }
+        return stacktrace;
+    }
+
     public String getName() {
+        String ctestParam = "name";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return name;
     }
 
     public void setName(final String name) {
+        String ctestParam = "name";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.name = name;
     }
 
     public HealthCheckType getType() {
+        String ctestParam = "type";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return type;
     }
 
     public void setType(HealthCheckType type) {
+        String ctestParam = "type";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.type = type;
     }
 
     public boolean isCritical() {
+        String ctestParam = "critical";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return critical;
     }
 
     public void setCritical(final boolean critical) {
+        String ctestParam = "critical";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.critical = critical;
     }
 
     public boolean isInitialState() {
+        String ctestParam = "initialState";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return initialState;
     }
 
     public void setInitialState(boolean initialState) {
+        String ctestParam = "initialState";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.initialState = initialState;
     }
 
diff --git a/dropwizard-health/src/main/java/io/dropwizard/health/Schedule.java b/dropwizard-health/src/main/java/io/dropwizard/health/Schedule.java
index cbbc0ccf7..9e76baed7 100644
--- a/dropwizard-health/src/main/java/io/dropwizard/health/Schedule.java
+++ b/dropwizard-health/src/main/java/io/dropwizard/health/Schedule.java
@@ -7,8 +7,14 @@ import javax.annotation.Nullable;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
 import java.util.Objects;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class Schedule {
+    private static final Logger LOGGER = LoggerFactory.getLogger(Schedule.class);
+
+    private static final String CTEST_GET_PARAM_FORMAT = "[CTEST][GET-PARAM] health.healthChecks.schedule.{}";
+    private static final String CTEST_SET_PARAM_FORMAT = "[CTEST][SET-PARAM] health.healthChecks.schedule.{}";
 
     @Nullable
     @JsonProperty
@@ -30,44 +36,73 @@ public class Schedule {
     @JsonProperty
     private int successAttempts = 2;
 
+    private String getStackTrace() {
+        String stacktrace = " ";
+        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+            stacktrace = stacktrace.concat(element.getClassName() + "\t");
+        }
+        return stacktrace;
+    }
+
     public Duration getInitialDelay() {
+        String ctestParam = "initialDelay";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
+
         // default to checkInterval value
         return initialDelay == null ? getCheckInterval() : initialDelay;
     }
 
     public void setInitialDelay(Duration initialDelay) {
+        String ctestParam = "initialDelay";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.initialDelay = initialDelay;
     }
 
     public Duration getCheckInterval() {
+        String ctestParam = "checkInterval";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return checkInterval;
     }
 
     public void setCheckInterval(final Duration checkInterval) {
+        String ctestParam = "checkInterval";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.checkInterval = checkInterval;
     }
 
     public Duration getDowntimeInterval() {
+        String ctestParam = "downtimeInterval";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return downtimeInterval;
     }
 
     public void setDowntimeInterval(final Duration downtimeInterval) {
+        String ctestParam = "downtimeInterval";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.downtimeInterval = downtimeInterval;
     }
 
     public int getFailureAttempts() {
+        String ctestParam = "failureAttempts";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return failureAttempts;
     }
 
     public void setFailureAttempts(final int failureAttempts) {
+        String ctestParam = "failureAttempts";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.failureAttempts = failureAttempts;
     }
 
     public int getSuccessAttempts() {
+        String ctestParam = "successAttempts";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return successAttempts;
     }
 
     public void setSuccessAttempts(final int successAttempts) {
+        String ctestParam = "successAttempts";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.successAttempts = successAttempts;
     }
 
diff --git a/dropwizard-health/src/main/java/io/dropwizard/health/response/ServletHealthResponderFactory.java b/dropwizard-health/src/main/java/io/dropwizard/health/response/ServletHealthResponderFactory.java
index d5fc51429..7fa850113 100644
--- a/dropwizard-health/src/main/java/io/dropwizard/health/response/ServletHealthResponderFactory.java
+++ b/dropwizard-health/src/main/java/io/dropwizard/health/response/ServletHealthResponderFactory.java
@@ -6,6 +6,8 @@ import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.health.HealthEnvironment;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
 import io.dropwizard.jetty.setup.ServletEnvironment;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.Collection;
 
@@ -14,6 +16,11 @@ import java.util.Collection;
  */
 @JsonTypeName("servlet")
 public class ServletHealthResponderFactory implements HealthResponderFactory {
+    private static final Logger LOGGER = LoggerFactory.getLogger(ServletHealthResponderFactory.class);
+
+    private static final String CTEST_GET_PARAM_FORMAT = "[CTEST][GET-PARAM] health.responder.{}";
+    private static final String CTEST_SET_PARAM_FORMAT = "[CTEST][SET-PARAM] health.responder.{}";
+
     static final String SERVLET_SUFFIX = "-servlet";
 
     @JsonProperty
@@ -22,19 +29,35 @@ public class ServletHealthResponderFactory implements HealthResponderFactory {
     @JsonProperty
     private String cacheControlValue = "no-store";
 
+    private String getStackTrace() {
+        String stacktrace = " ";
+        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+            stacktrace = stacktrace.concat(element.getClassName() + "\t");
+        }
+        return stacktrace;
+    }
+
     public boolean isCacheControlEnabled() {
+        String ctestParam = "cacheControlEnabled";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return cacheControlEnabled;
     }
 
     public void setCacheControlEnabled(boolean cacheControlEnabled) {
+        String ctestParam = "cacheControlEnabled";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.cacheControlEnabled = cacheControlEnabled;
     }
 
     public String getCacheControlValue() {
+        String ctestParam = "cacheControlValue";
+        LOGGER.warn(CTEST_GET_PARAM_FORMAT, ctestParam);
         return cacheControlValue;
     }
 
     public void setCacheControlValue(String cacheControlValue) {
+        String ctestParam = "cacheControlValue";
+        LOGGER.warn(CTEST_SET_PARAM_FORMAT, ctestParam + getStackTrace());
         this.cacheControlValue = cacheControlValue;
     }
 
-- 
2.37.1 (Apple Git-137.1)

