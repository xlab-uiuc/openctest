diff --git a/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index f78a5b668a..cb765a99d1 100644
--- a/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -858,8 +858,11 @@ public class DatabaseDescriptor
     @VisibleForTesting
     static void applyConcurrentValidations(Config config)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_validations" ); //CTEST
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_compactors" ); //CTEST
         if (config.concurrent_validations < 1)
         {
+            logger.warn("[CTEST][SET-PARAM] " + "concurrent_compactors" + getStackTrace()); //CTEST
             config.concurrent_validations = config.concurrent_compactors;
         }
         else if (config.concurrent_validations > config.concurrent_compactors && !allowUnlimitedConcurrentValidations)
@@ -872,8 +875,10 @@ public class DatabaseDescriptor
     @VisibleForTesting
     static void applyRepairCommandPoolSize(Config config)
     {
-        if (config.repair_command_pool_size < 1)
+        if (config.repair_command_pool_size < 1) {
+            logger.warn("[CTEST][SET-PARAM] " + "concurrent_validations" + getStackTrace()); //CTEST
             config.repair_command_pool_size = config.concurrent_validations;
+        }
     }
 
     private static String storagedirFor(String type)
@@ -919,6 +924,8 @@ public class DatabaseDescriptor
         broadcastRpcAddress = null;
 
         /* Local IP, hostname or interface to bind services to */
+        logger.warn("[CTEST][GET-PARAM] " + "listen_address" ); //CTEST
+        logger.warn("[CTEST][GET-PARAM] " + "listen_interface" ); //CTEST
         if (config.listen_address != null && config.listen_interface != null)
         {
             throw new ConfigurationException("Set listen_address OR listen_interface, not both", false);
@@ -943,6 +950,7 @@ public class DatabaseDescriptor
         }
 
         /* Gossip Address to broadcast */
+        logger.warn("[CTEST][GET-PARAM] " + "broadcast_address" ); //CTEST
         if (config.broadcast_address != null)
         {
             try
@@ -959,6 +967,8 @@ public class DatabaseDescriptor
         }
 
         /* Local IP, hostname or interface to bind RPC server to */
+        logger.warn("[CTEST][GET-PARAM] " + "rpc_address" ); //CTEST
+        logger.warn("[CTEST][GET-PARAM] " + "rpc_interface" ); //CTEST
         if (config.rpc_address != null && config.rpc_interface != null)
         {
             throw new ConfigurationException("Set rpc_address OR rpc_interface, not both", false);
@@ -984,6 +994,7 @@ public class DatabaseDescriptor
         }
 
         /* RPC address to broadcast */
+        logger.warn("[CTEST][GET-PARAM] " + "broadcast_rpc_address" ); //CTEST
         if (config.broadcast_rpc_address != null)
         {
             try
@@ -1010,6 +1021,7 @@ public class DatabaseDescriptor
     {
         // always attempt to load the cipher factory, as we could be in the situation where the user has disabled encryption,
         // but has existing commitlogs and sstables on disk that are still encrypted (and still need to be read)
+        logger.warn("[CTEST][GET-PARAM] " + "transparent_data_encryption_options" ); //CTEST
         encryptionContext = new EncryptionContext(conf.transparent_data_encryption_options);
     }
 
@@ -1017,7 +1029,10 @@ public class DatabaseDescriptor
     {
         try
         {
+            logger.warn("[CTEST][GET-PARAM] " + "server_encryption_options" ); //CTEST
             SSLFactory.validateSslContext("Internode messaging", conf.server_encryption_options, true, true);
+            logger.warn("[CTEST][GET-PARAM] " + "client_encryption_options" ); //CTEST
+            logger.warn("[CTEST][GET-PARAM] " + "client_encryption_options.require_client_auth" ); //CTEST
             SSLFactory.validateSslContext("Native transport", conf.client_encryption_options, conf.client_encryption_options.require_client_auth, true);
             SSLFactory.initHotReloading(conf.server_encryption_options, conf.client_encryption_options, false);
         }
@@ -1036,6 +1051,7 @@ public class DatabaseDescriptor
         }
         try
         {
+            logger.warn("[CTEST][GET-PARAM] " + "seed_provider.parameters" ); //CTEST
             Class<?> seedProviderClass = Class.forName(conf.seed_provider.class_name);
             seedProvider = (SeedProvider)seedProviderClass.getConstructor(Map.class).newInstance(conf.seed_provider.parameters);
         }
@@ -1055,42 +1071,49 @@ public class DatabaseDescriptor
         {
            logInfo("read_request_timeout_in_ms", conf.read_request_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.read_request_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "read_request_timeout_in_ms" + getStackTrace()); //CTEST
         }
 
         if(conf.range_request_timeout_in_ms < LOWEST_ACCEPTED_TIMEOUT)
         {
            logInfo("range_request_timeout_in_ms", conf.range_request_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.range_request_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "range_request_timeout_in_ms" + getStackTrace()); //CTEST
         }
 
         if(conf.request_timeout_in_ms < LOWEST_ACCEPTED_TIMEOUT)
         {
            logInfo("request_timeout_in_ms", conf.request_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.request_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "request_timeout_in_ms" + getStackTrace()); //CTEST
         }
 
         if(conf.write_request_timeout_in_ms < LOWEST_ACCEPTED_TIMEOUT)
         {
            logInfo("write_request_timeout_in_ms", conf.write_request_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.write_request_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "write_request_timeout_in_ms" + getStackTrace()); //CTEST
         }
 
         if(conf.cas_contention_timeout_in_ms < LOWEST_ACCEPTED_TIMEOUT)
         {
            logInfo("cas_contention_timeout_in_ms", conf.cas_contention_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.cas_contention_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "cas_contention_timeout_in_ms" + getStackTrace()); //CTEST
         }
 
         if(conf.counter_write_request_timeout_in_ms < LOWEST_ACCEPTED_TIMEOUT)
         {
            logInfo("counter_write_request_timeout_in_ms", conf.counter_write_request_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.counter_write_request_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "counter_write_request_timeout_in_ms" + getStackTrace()); //CTEST
         }
 
         if(conf.truncate_request_timeout_in_ms < LOWEST_ACCEPTED_TIMEOUT)
         {
            logInfo("truncate_request_timeout_in_ms", conf.truncate_request_timeout_in_ms, LOWEST_ACCEPTED_TIMEOUT);
            conf.truncate_request_timeout_in_ms = LOWEST_ACCEPTED_TIMEOUT;
+            logger.warn("[CTEST][SET-PARAM] " + "truncate_request_timeout_in_ms" + getStackTrace()); //CTEST
         }
     }
 
@@ -1106,13 +1129,16 @@ public class DatabaseDescriptor
 
     static void applyTokensConfig(Config conf)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "initial_token" ); //CTEST
         if (conf.initial_token != null)
         {
             Collection<String> tokens = tokensFromString(conf.initial_token);
             if (conf.num_tokens == null)
             {
-                if (tokens.size() == 1)
+                if (tokens.size() == 1) {
                     conf.num_tokens = 1;
+                    logger.warn("[CTEST][SET-PARAM] " + "num_tokens" + getStackTrace()); //CTEST
+                }
                 else
                     throw new ConfigurationException("initial_token was set but num_tokens is not!", false);
             }
@@ -1131,6 +1157,7 @@ public class DatabaseDescriptor
         else if (conf.num_tokens == null)
         {
             conf.num_tokens = 1;
+            logger.warn("[CTEST][SET-PARAM] " + "num_tokens" + getStackTrace()); //CTEST
         }
     }
 
@@ -1165,6 +1192,7 @@ public class DatabaseDescriptor
 
     public static void applyPartitioner(Config conf)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "partitioner" ); //CTEST
         /* Hashing strategy */
         if (conf.partitioner == null)
         {
@@ -1249,56 +1277,68 @@ public class DatabaseDescriptor
 
     public static IAuthenticator getAuthenticator()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "authenticator" ); //CTEST
         return authenticator;
     }
 
     public static void setAuthenticator(IAuthenticator authenticator)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "authenticator" + getStackTrace()); //CTEST
         DatabaseDescriptor.authenticator = authenticator;
     }
 
     public static IAuthorizer getAuthorizer()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "authorizer" ); //CTEST
         return authorizer;
     }
 
     public static void setAuthorizer(IAuthorizer authorizer)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "authorizer" + getStackTrace()); //CTEST
         DatabaseDescriptor.authorizer = authorizer;
     }
 
     public static INetworkAuthorizer getNetworkAuthorizer()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "networkAuthorizer" ); //CTEST
         return networkAuthorizer;
     }
 
     public static void setNetworkAuthorizer(INetworkAuthorizer networkAuthorizer)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "networkAuthorizer" + getStackTrace()); //CTEST
         DatabaseDescriptor.networkAuthorizer = networkAuthorizer;
     }
 
     public static IRoleManager getRoleManager()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "roleManager" ); //CTEST
         return roleManager;
     }
 
     public static void setRoleManager(IRoleManager roleManager)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "roleManager" + getStackTrace()); //CTEST
         DatabaseDescriptor.roleManager = roleManager;
     }
 
     public static int getPermissionsValidity()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "permissions_validity_in_ms" ); //CTEST
         return conf.permissions_validity_in_ms;
     }
 
     public static void setPermissionsValidity(int timeout)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "rolemanager" + getStackTrace()); //CTEST
         conf.permissions_validity_in_ms = timeout;
     }
 
     public static int getPermissionsUpdateInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "permissions_update_interval_in_ms" ); //CTEST
+        logger.warn("[CTEST][GET-PARAM] " + "permissions_validity_in_ms" ); //CTEST
         return conf.permissions_update_interval_in_ms == -1
              ? conf.permissions_validity_in_ms
              : conf.permissions_update_interval_in_ms;
@@ -1306,31 +1346,38 @@ public class DatabaseDescriptor
 
     public static void setPermissionsUpdateInterval(int updateInterval)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "permissions_update_interval_in_ms" + getStackTrace()); //CTEST
         conf.permissions_update_interval_in_ms = updateInterval;
     }
 
     public static int getPermissionsCacheMaxEntries()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "permissions_cache_max_entries" ); //CTEST
         return conf.permissions_cache_max_entries;
     }
 
     public static int setPermissionsCacheMaxEntries(int maxEntries)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "permissions_cache_max_entries" ); //CTEST
         return conf.permissions_cache_max_entries = maxEntries;
     }
 
     public static int getRolesValidity()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "roles_validity_in_ms" ); //CTEST
         return conf.roles_validity_in_ms;
     }
 
     public static void setRolesValidity(int validity)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "roles_validity_in_ms" + getStackTrace()); //CTEST
         conf.roles_validity_in_ms = validity;
     }
 
     public static int getRolesUpdateInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "roles_update_interval_in_ms" ); //CTEST
+        logger.warn("[CTEST][GET-PARAM] " + "roles_validity_in_ms" ); //CTEST
         return conf.roles_update_interval_in_ms == -1
              ? conf.roles_validity_in_ms
              : conf.roles_update_interval_in_ms;
@@ -1338,31 +1385,38 @@ public class DatabaseDescriptor
 
     public static void setRolesUpdateInterval(int interval)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "roles_update_interval_in_ms" + getStackTrace()); //CTEST
         conf.roles_update_interval_in_ms = interval;
     }
 
     public static int getRolesCacheMaxEntries()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "roles_cache_max_entries" ); //CTEST
         return conf.roles_cache_max_entries;
     }
 
     public static int setRolesCacheMaxEntries(int maxEntries)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "roles_cache_max_entries" ); //CTEST
         return conf.roles_cache_max_entries = maxEntries;
     }
 
     public static int getCredentialsValidity()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "credentials_validity_in_ms" ); //CTEST
         return conf.credentials_validity_in_ms;
     }
 
     public static void setCredentialsValidity(int timeout)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "credentials_validity_in_ms" + getStackTrace()); //CTEST
         conf.credentials_validity_in_ms = timeout;
     }
 
     public static int getCredentialsUpdateInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "credentials_update_interval_in_ms" ); //CTEST
+        logger.warn("[CTEST][GET-PARAM] " + "credentials_validity_in_ms" ); //CTEST
         return conf.credentials_update_interval_in_ms == -1
                ? conf.credentials_validity_in_ms
                : conf.credentials_update_interval_in_ms;
@@ -1370,26 +1424,31 @@ public class DatabaseDescriptor
 
     public static void setCredentialsUpdateInterval(int updateInterval)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "credentials_update_interval_in_ms" + getStackTrace()); //CTEST
         conf.credentials_update_interval_in_ms = updateInterval;
     }
 
     public static int getCredentialsCacheMaxEntries()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "credentials_cache_max_entries" ); //CTEST
         return conf.credentials_cache_max_entries;
     }
 
     public static int setCredentialsCacheMaxEntries(int maxEntries)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "credentials_cache_max_entries" ); //CTEST
         return conf.credentials_cache_max_entries = maxEntries;
     }
 
     public static int getMaxValueSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "max_value_size_in_mb" ); //CTEST
         return conf.max_value_size_in_mb * 1024 * 1024;
     }
 
     public static void setMaxValueSize(int maxValueSizeInBytes)
     {
+        logger.warn("[CTEST][SET-PARAM] " + "max_value_size_in_mb" + getStackTrace()); //CTEST
         conf.max_value_size_in_mb = maxValueSizeInBytes / 1024 / 1024;
     }
 
@@ -1400,29 +1459,36 @@ public class DatabaseDescriptor
     {
         try
         {
+            logger.warn("[CTEST][GET-PARAM] " + "data_file_directories" ); //CTEST
             if (conf.data_file_directories.length == 0)
                 throw new ConfigurationException("At least one DataFileDirectory must be specified", false);
 
             for (String dataFileDirectory : conf.data_file_directories)
                 FileUtils.createDirectory(dataFileDirectory);
 
+            logger.warn("[CTEST][GET-PARAM] " + "local_system_data_file_directory" ); //CTEST
             if (conf.local_system_data_file_directory != null)
                 FileUtils.createDirectory(conf.local_system_data_file_directory);
 
+            logger.warn("[CTEST][GET-PARAM] " + "commitlog_directory" ); //CTEST
             if (conf.commitlog_directory == null)
                 throw new ConfigurationException("commitlog_directory must be specified", false);
             FileUtils.createDirectory(conf.commitlog_directory);
 
+            logger.warn("[CTEST][GET-PARAM] " + "hints_directory" ); //CTEST
             if (conf.hints_directory == null)
                 throw new ConfigurationException("hints_directory must be specified", false);
             FileUtils.createDirectory(conf.hints_directory);
 
+            logger.warn("[CTEST][GET-PARAM] " + "saved_caches_directory" ); //CTEST
             if (conf.saved_caches_directory == null)
                 throw new ConfigurationException("saved_caches_directory must be specified", false);
             FileUtils.createDirectory(conf.saved_caches_directory);
 
+            logger.warn("[CTEST][GET-PARAM] " + "cdc_enabled" ); //CTEST
             if (conf.cdc_enabled)
             {
+                logger.warn("[CTEST][GET-PARAM] " + "cdc_raw_directory" ); //CTEST
                 if (conf.cdc_raw_directory == null)
                     throw new ConfigurationException("cdc_raw_directory must be specified", false);
                 FileUtils.createDirectory(conf.cdc_raw_directory);
@@ -1467,11 +1533,13 @@ public class DatabaseDescriptor
 
     public static int getColumnIndexSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "column_index_size_in_kb" ); //CTEST
         return (int) ByteUnit.KIBI_BYTES.toBytes(conf.column_index_size_in_kb);
     }
 
     public static int getColumnIndexSizeInKB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "column_index_size_in_kb" ); //CTEST
         return conf.column_index_size_in_kb;
     }
 
@@ -1480,15 +1548,18 @@ public class DatabaseDescriptor
     {
         checkValidForByteConversion(val, "column_index_size_in_kb", ByteUnit.KIBI_BYTES);
         conf.column_index_size_in_kb = val;
+        logger.warn("[CTEST][SET-PARAM] " + "column_index_size_in_kb" + getStackTrace()); //CTEST
     }
 
     public static int getColumnIndexCacheSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "column_index_cache_size_in_kb" ); //CTEST
         return (int) ByteUnit.KIBI_BYTES.toBytes(conf.column_index_cache_size_in_kb);
     }
 
     public static int getColumnIndexCacheSizeInKB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "column_index_cache_size_in_kb" ); //CTEST
         return conf.column_index_cache_size_in_kb;
     }
 
@@ -1496,30 +1567,36 @@ public class DatabaseDescriptor
     {
         checkValidForByteConversion(val, "column_index_cache_size_in_kb", ByteUnit.KIBI_BYTES);
         conf.column_index_cache_size_in_kb = val;
+        logger.warn("[CTEST][SET-PARAM] " + "column_index_cache_size_in_kb" + getStackTrace()); //CTEST
     }
 
     public static int getBatchSizeWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "batch_size_warn_threshold_in_kb" ); //CTEST
         return (int) ByteUnit.KIBI_BYTES.toBytes(conf.batch_size_warn_threshold_in_kb);
     }
 
     public static int getBatchSizeWarnThresholdInKB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "batch_size_warn_threshold_in_kb" ); //CTEST
         return conf.batch_size_warn_threshold_in_kb;
     }
 
     public static long getBatchSizeFailThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "batch_size_fail_threshold_in_kb" ); //CTEST
         return ByteUnit.KIBI_BYTES.toBytes(conf.batch_size_fail_threshold_in_kb);
     }
 
     public static int getBatchSizeFailThresholdInKB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "batch_size_fail_threshold_in_kb" ); //CTEST
         return conf.batch_size_fail_threshold_in_kb;
     }
 
     public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "unlogged_batch_across_partitions_warn_threshold" ); //CTEST
         return conf.unlogged_batch_across_partitions_warn_threshold;
     }
 
@@ -1527,25 +1604,30 @@ public class DatabaseDescriptor
     {
         checkValidForByteConversion(threshold, "batch_size_warn_threshold_in_kb", ByteUnit.KIBI_BYTES);
         conf.batch_size_warn_threshold_in_kb = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "batch_size_warn_threshold_in_kb" + getStackTrace()); //CTEST
     }
 
     public static void setBatchSizeFailThresholdInKB(int threshold)
     {
         conf.batch_size_fail_threshold_in_kb = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "batch_size_fail_threshold_in_kb" + getStackTrace()); //CTEST
     }
 
     public static Collection<String> getInitialTokens()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "initial_token" ); //CTEST
         return tokensFromString(System.getProperty(Config.PROPERTY_PREFIX + "initial_token", conf.initial_token));
     }
 
     public static String getAllocateTokensForKeyspace()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "allocate_tokens_for_keyspace" ); //CTEST
         return System.getProperty(Config.PROPERTY_PREFIX + "allocate_tokens_for_keyspace", conf.allocate_tokens_for_keyspace);
     }
 
     public static Integer getAllocateTokensForLocalRf()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "allocate_tokens_for_local_replication_factor" ); //CTEST
         return conf.allocate_tokens_for_local_replication_factor;
     }
 
@@ -1560,6 +1642,7 @@ public class DatabaseDescriptor
 
     public static int getNumTokens()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "num_tokens" ); //CTEST
         return conf.num_tokens;
     }
 
@@ -1597,11 +1680,13 @@ public class DatabaseDescriptor
 
     public static String getClusterName()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cluster_name" ); //CTEST
         return conf.cluster_name;
     }
 
     public static int getStoragePort()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "storage_port" ); //CTEST
         return Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + "storage_port", Integer.toString(conf.storage_port)));
     }
 
@@ -1612,96 +1697,115 @@ public class DatabaseDescriptor
 
     public static long nativeTransportIdleTimeout()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_idle_timeout_in_ms" ); //CTEST
         return conf.native_transport_idle_timeout_in_ms;
     }
 
     public static void setNativeTransportIdleTimeout(long nativeTransportTimeout)
     {
         conf.native_transport_idle_timeout_in_ms = nativeTransportTimeout;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_idle_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setRpcTimeout(long timeOutInMillis)
     {
         conf.request_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getReadRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "read_request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.read_request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setReadRpcTimeout(long timeOutInMillis)
     {
         conf.read_request_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "read_request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getRangeRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "range_request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.range_request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setRangeRpcTimeout(long timeOutInMillis)
     {
         conf.range_request_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "range_request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getWriteRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "write_request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.write_request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setWriteRpcTimeout(long timeOutInMillis)
     {
         conf.write_request_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "write_request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getCounterWriteRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "counter_write_request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.counter_write_request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setCounterWriteRpcTimeout(long timeOutInMillis)
     {
         conf.counter_write_request_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "counter_write_request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getCasContentionTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cas_contention_timeout_in_ms" ); //CTEST
         return unit.convert(conf.cas_contention_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setCasContentionTimeout(long timeOutInMillis)
     {
         conf.cas_contention_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "cas_contention_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static long getTruncateRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "truncate_request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.truncate_request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setTruncateRpcTimeout(long timeOutInMillis)
     {
         conf.truncate_request_timeout_in_ms = timeOutInMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "truncate_request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static boolean hasCrossNodeTimeout()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cross_node_timeout" ); //CTEST
         return conf.cross_node_timeout;
     }
 
     public static void setCrossNodeTimeout(boolean crossNodeTimeout)
     {
         conf.cross_node_timeout = crossNodeTimeout;
+        logger.warn("[CTEST][SET-PARAM] " + "cross_node_timeout" + getStackTrace()); //CTEST
     }
 
     public static long getSlowQueryTimeout(TimeUnit units)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "slow_query_log_timeout_in_ms" ); //CTEST
         return units.convert(conf.slow_query_log_timeout_in_ms, MILLISECONDS);
     }
 
@@ -1725,26 +1829,31 @@ public class DatabaseDescriptor
 
     public static long getRepairRpcTimeout(TimeUnit unit)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repair_request_timeout_in_ms" ); //CTEST
         return unit.convert(conf.repair_request_timeout_in_ms, MILLISECONDS);
     }
 
     public static void setRepairRpcTimeout(long time, TimeUnit unit)
     {
         conf.repair_request_timeout_in_ms = MILLISECONDS.convert(time, unit);
+        logger.warn("[CTEST][SET-PARAM] " + "repair_request_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static double getPhiConvictThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "phi_convict_threshold" ); //CTEST
         return conf.phi_convict_threshold;
     }
 
     public static void setPhiConvictThreshold(double phiConvictThreshold)
     {
         conf.phi_convict_threshold = phiConvictThreshold;
+        logger.warn("[CTEST][SET-PARAM] " + "phi_convict_threshold" + getStackTrace()); //CTEST
     }
 
     public static int getConcurrentReaders()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_reads" ); //CTEST
         return conf.concurrent_reads;
     }
 
@@ -1755,10 +1864,12 @@ public class DatabaseDescriptor
             throw new IllegalArgumentException("Concurrent reads must be non-negative");
         }
         conf.concurrent_reads = concurrent_reads;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_reads" + getStackTrace()); //CTEST
     }
 
     public static int getConcurrentWriters()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_writes" ); //CTEST
         return conf.concurrent_writes;
     }
 
@@ -1769,10 +1880,12 @@ public class DatabaseDescriptor
             throw new IllegalArgumentException("Concurrent reads must be non-negative");
         }
         conf.concurrent_writes = concurrent_writers;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_writes" + getStackTrace()); //CTEST
     }
 
     public static int getConcurrentCounterWriters()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_counter_writes" ); //CTEST
         return conf.concurrent_counter_writes;
     }
 
@@ -1783,10 +1896,12 @@ public class DatabaseDescriptor
             throw new IllegalArgumentException("Concurrent reads must be non-negative");
         }
         conf.concurrent_counter_writes = concurrent_counter_writes;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_counter_writes" + getStackTrace()); //CTEST
     }
 
     public static int getConcurrentViewWriters()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_materialized_view_writes" ); //CTEST
         return conf.concurrent_materialized_view_writes;
     }
 
@@ -1797,37 +1912,47 @@ public class DatabaseDescriptor
             throw new IllegalArgumentException("Concurrent reads must be non-negative");
         }
         conf.concurrent_materialized_view_writes = concurrent_materialized_view_writes;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_materialized_view_writes" + getStackTrace()); //CTEST
     }
 
     public static int getFlushWriters()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "memtable_flush_writers" ); //CTEST
         return conf.memtable_flush_writers;
     }
 
     public static int getConcurrentCompactors()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_compactors" ); //CTEST
         return conf.concurrent_compactors;
     }
 
     public static void setConcurrentCompactors(int value)
     {
         conf.concurrent_compactors = value;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_compactors" + getStackTrace()); //CTEST
     }
 
     public static int getCompactionThroughputMbPerSec()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "compaction_throughput_mb_per_sec" ); //CTEST
         return conf.compaction_throughput_mb_per_sec;
     }
 
     public static void setCompactionThroughputMbPerSec(int value)
     {
         conf.compaction_throughput_mb_per_sec = value;
+        logger.warn("[CTEST][SET-PARAM] " + "compaction_throughput_mb_per_sec" + getStackTrace()); //CTEST
     }
 
-    public static long getCompactionLargePartitionWarningThreshold() { return ByteUnit.MEBI_BYTES.toBytes(conf.compaction_large_partition_warning_threshold_mb); }
+    public static long getCompactionLargePartitionWarningThreshold() {
+        logger.warn("[CTEST][GET-PARAM] " + "compaction_large_partition_warning_threshold_mb" ); //CTEST
+        return ByteUnit.MEBI_BYTES.toBytes(conf.compaction_large_partition_warning_threshold_mb);
+    }
 
     public static int getConcurrentValidations()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_validations" ); //CTEST
         return conf.concurrent_validations;
     }
 
@@ -1835,20 +1960,24 @@ public class DatabaseDescriptor
     {
         value = value > 0 ? value : Integer.MAX_VALUE;
         conf.concurrent_validations = value;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_validations" + getStackTrace()); //CTEST
     }
 
     public static int getConcurrentViewBuilders()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "concurrent_materialized_view_builders" ); //CTEST
         return conf.concurrent_materialized_view_builders;
     }
 
     public static void setConcurrentViewBuilders(int value)
     {
         conf.concurrent_materialized_view_builders = value;
+        logger.warn("[CTEST][SET-PARAM] " + "concurrent_materialized_view_builders" + getStackTrace()); //CTEST
     }
 
     public static long getMinFreeSpacePerDriveInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "min_free_space_per_drive_in_mb" ); //CTEST
         return ByteUnit.MEBI_BYTES.toBytes(conf.min_free_space_per_drive_in_mb);
     }
 
@@ -1864,22 +1993,26 @@ public class DatabaseDescriptor
 
     public static int getStreamThroughputOutboundMegabitsPerSec()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "stream_throughput_outbound_megabits_per_sec" ); //CTEST
         return conf.stream_throughput_outbound_megabits_per_sec;
     }
 
     public static void setStreamThroughputOutboundMegabitsPerSec(int value)
     {
         conf.stream_throughput_outbound_megabits_per_sec = value;
+        logger.warn("[CTEST][SET-PARAM] " + "stream_throughput_outbound_megabits_per_sec" + getStackTrace()); //CTEST
     }
 
     public static int getInterDCStreamThroughputOutboundMegabitsPerSec()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "inter_dc_stream_throughput_outbound_megabits_per_sec" ); //CTEST
         return conf.inter_dc_stream_throughput_outbound_megabits_per_sec;
     }
 
     public static void setInterDCStreamThroughputOutboundMegabitsPerSec(int value)
     {
         conf.inter_dc_stream_throughput_outbound_megabits_per_sec = value;
+        logger.warn("[CTEST][SET-PARAM] " + "inter_dc_stream_throughput_outbound_megabits_per_sec" + getStackTrace()); //CTEST
     }
 
     /**
@@ -1890,6 +2023,7 @@ public class DatabaseDescriptor
      */
     public static boolean useSpecificLocationForLocalSystemData()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "local_system_data_file_directory" ); //CTEST
         return conf.local_system_data_file_directory != null;
     }
 
@@ -1903,9 +2037,11 @@ public class DatabaseDescriptor
      */
     public static String[] getLocalSystemKeyspacesDataFileLocations()
     {
-        if (useSpecificLocationForLocalSystemData())
+        if (useSpecificLocationForLocalSystemData()) {
+            logger.warn("[CTEST][GET-PARAM] " + "local_system_data_file_directory" ); //CTEST
             return new String[] {conf.local_system_data_file_directory};
-
+        }
+        logger.warn("[CTEST][GET-PARAM] " + "local_system_data_file_directory" ); //CTEST
         return conf.data_file_directories.length == 0  ? conf.data_file_directories
                                                        : new String[] {conf.data_file_directories[0]};
     }
@@ -1917,6 +2053,7 @@ public class DatabaseDescriptor
      */
     public static String[] getNonLocalSystemKeyspacesDataFileLocations()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "data_file_directories" ); //CTEST
         return conf.data_file_directories;
     }
 
@@ -1927,14 +2064,18 @@ public class DatabaseDescriptor
      */
     public static String[] getAllDataFileLocations()
     {
-        if (conf.local_system_data_file_directory == null)
+        logger.warn("[CTEST][GET-PARAM] " + "local_system_data_file_directory" ); //CTEST
+        if (conf.local_system_data_file_directory == null) {
+            logger.warn("[CTEST][GET-PARAM] " + "data_file_directories" ); //CTEST
             return conf.data_file_directories;
-
+        }
+        logger.warn("[CTEST][GET-PARAM] " + "data_file_directories" ); //CTEST
         return ArrayUtils.addFirst(conf.data_file_directories, conf.local_system_data_file_directory);
     }
 
     public static String getCommitLogLocation()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_directory" ); //CTEST
         return conf.commitlog_directory;
     }
 
@@ -1942,26 +2083,31 @@ public class DatabaseDescriptor
     public static void setCommitLogLocation(String value)
     {
         conf.commitlog_directory = value;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_directory" + getStackTrace()); //CTEST
     }
 
     public static ParameterizedClass getCommitLogCompression()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_compression" ); //CTEST
         return conf.commitlog_compression;
     }
 
     public static void setCommitLogCompression(ParameterizedClass compressor)
     {
         conf.commitlog_compression = compressor;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_compression" + getStackTrace()); //CTEST
     }
 
     public static Config.FlushCompression getFlushCompression()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "flush_compression" ); //CTEST
         return conf.flush_compression;
     }
 
     public static void setFlushCompression(Config.FlushCompression compression)
     {
         conf.flush_compression = compression;
+        logger.warn("[CTEST][SET-PARAM] " + "flush_compression" + getStackTrace()); //CTEST
     }
 
    /**
@@ -1971,57 +2117,68 @@ public class DatabaseDescriptor
     */
     public static int getCommitLogMaxCompressionBuffersInPool()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_max_compression_buffers_in_pool" ); //CTEST
         return conf.commitlog_max_compression_buffers_in_pool;
     }
 
     public static void setCommitLogMaxCompressionBuffersPerPool(int buffers)
     {
         conf.commitlog_max_compression_buffers_in_pool = buffers;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_max_compression_buffers_in_pool" + getStackTrace()); //CTEST
     }
 
     public static int getMaxMutationSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "max_mutation_size_in_kb" ); //CTEST
         return (int) ByteUnit.KIBI_BYTES.toBytes(conf.max_mutation_size_in_kb);
     }
 
     public static int getTombstoneWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "tombstone_warn_threshold" ); //CTEST
         return conf.tombstone_warn_threshold;
     }
 
     public static void setTombstoneWarnThreshold(int threshold)
     {
         conf.tombstone_warn_threshold = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "tombstone_warn_threshold" + getStackTrace()); //CTEST
     }
 
     public static int getTombstoneFailureThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "tombstone_failure_threshold" ); //CTEST
         return conf.tombstone_failure_threshold;
     }
 
     public static void setTombstoneFailureThreshold(int threshold)
     {
         conf.tombstone_failure_threshold = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "tombstone_failure_threshold" + getStackTrace()); //CTEST
     }
 
     public static int getCachedReplicaRowsWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "replica_filtering_protection.cached_rows_warn_threshold" ); //CTEST
         return conf.replica_filtering_protection.cached_rows_warn_threshold;
     }
 
     public static void setCachedReplicaRowsWarnThreshold(int threshold)
     {
         conf.replica_filtering_protection.cached_rows_warn_threshold = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "replica_filtering_protection.cached_rows_warn_threshold" + getStackTrace()); //CTEST
     }
 
     public static int getCachedReplicaRowsFailThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "replica_filtering_protection.cached_rows_fail_threshold" ); //CTEST
         return conf.replica_filtering_protection.cached_rows_fail_threshold;
     }
 
     public static void setCachedReplicaRowsFailThreshold(int threshold)
     {
         conf.replica_filtering_protection.cached_rows_fail_threshold = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "replica_filtering_protection.cached_rows_fail_threshold" + getStackTrace()); //CTEST
     }
 
     /**
@@ -2029,16 +2186,19 @@ public class DatabaseDescriptor
      */
     public static int getCommitLogSegmentSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_segment_size_in_mb" ); //CTEST
         return (int) ByteUnit.MEBI_BYTES.toBytes(conf.commitlog_segment_size_in_mb);
     }
 
     public static void setCommitLogSegmentSize(int sizeMegabytes)
     {
         conf.commitlog_segment_size_in_mb = sizeMegabytes;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_segment_size_in_mb" + getStackTrace()); //CTEST
     }
 
     public static String getSavedCachesLocation()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "saved_caches_directory" ); //CTEST
         return conf.saved_caches_directory;
     }
 
@@ -2074,17 +2234,20 @@ public class DatabaseDescriptor
 
     public static boolean shouldListenOnBroadcastAddress()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "listen_on_broadcast_address" ); //CTEST
         return conf.listen_on_broadcast_address;
     }
 
     public static void setShouldListenOnBroadcastAddress(boolean shouldListenOnBroadcastAddress)
     {
         conf.listen_on_broadcast_address = shouldListenOnBroadcastAddress;
+        logger.warn("[CTEST][SET-PARAM] " + "listen_on_broadcast_address" + getStackTrace()); //CTEST
     }
 
     public static void setListenOnBroadcastAddress(boolean listen_on_broadcast_address)
     {
         conf.listen_on_broadcast_address = listen_on_broadcast_address;
+        logger.warn("[CTEST][SET-PARAM] " + "listen_on_broadcast_address" + getStackTrace()); //CTEST
     }
 
     public static IInternodeAuthenticator getInternodeAuthenticator()
@@ -2134,81 +2297,97 @@ public class DatabaseDescriptor
 
     public static boolean getRpcKeepAlive()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "rpc_keepalive" ); //CTEST
         return conf.rpc_keepalive;
     }
 
     public static int getInternodeSocketSendBufferSizeInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_socket_send_buffer_size_in_bytes" ); //CTEST
         return conf.internode_socket_send_buffer_size_in_bytes;
     }
 
     public static int getInternodeSocketReceiveBufferSizeInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_socket_receive_buffer_size_in_bytes" ); //CTEST
         return conf.internode_socket_receive_buffer_size_in_bytes;
     }
 
     public static int getInternodeApplicationSendQueueCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_application_send_queue_capacity_in_bytes" ); //CTEST
         return conf.internode_application_send_queue_capacity_in_bytes;
     }
 
     public static int getInternodeApplicationSendQueueReserveEndpointCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_application_send_queue_reserve_endpoint_capacity_in_bytes" ); //CTEST
         return conf.internode_application_send_queue_reserve_endpoint_capacity_in_bytes;
     }
 
     public static int getInternodeApplicationSendQueueReserveGlobalCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_application_send_queue_reserve_global_capacity_in_bytes" ); //CTEST
         return conf.internode_application_send_queue_reserve_global_capacity_in_bytes;
     }
 
     public static int getInternodeApplicationReceiveQueueCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_application_receive_queue_capacity_in_bytes" ); //CTEST
         return conf.internode_application_receive_queue_capacity_in_bytes;
     }
 
     public static int getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_application_receive_queue_reserve_endpoint_capacity_in_bytes" ); //CTEST
         return conf.internode_application_receive_queue_reserve_endpoint_capacity_in_bytes;
     }
 
     public static int getInternodeApplicationReceiveQueueReserveGlobalCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_application_receive_queue_reserve_global_capacity_in_bytes" ); //CTEST
         return conf.internode_application_receive_queue_reserve_global_capacity_in_bytes;
     }
 
     public static int getInternodeTcpConnectTimeoutInMS()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_tcp_connect_timeout_in_ms" ); //CTEST
         return conf.internode_tcp_connect_timeout_in_ms;
     }
 
     public static void setInternodeTcpConnectTimeoutInMS(int value)
     {
         conf.internode_tcp_connect_timeout_in_ms = value;
+        logger.warn("[CTEST][SET-PARAM] " + "internode_tcp_connect_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static int getInternodeTcpUserTimeoutInMS()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_tcp_user_timeout_in_ms" ); //CTEST
         return conf.internode_tcp_user_timeout_in_ms;
     }
 
     public static void setInternodeTcpUserTimeoutInMS(int value)
     {
         conf.internode_tcp_user_timeout_in_ms = value;
+        logger.warn("[CTEST][SET-PARAM] " + "internode_tcp_user_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static int getInternodeStreamingTcpUserTimeoutInMS()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_streaming_tcp_user_timeout_in_ms" ); //CTEST
         return conf.internode_streaming_tcp_user_timeout_in_ms;
     }
 
     public static void setInternodeStreamingTcpUserTimeoutInMS(int value)
     {
         conf.internode_streaming_tcp_user_timeout_in_ms = value;
+        logger.warn("[CTEST][SET-PARAM] " + "internode_streaming_tcp_user_timeout_in_ms" + getStackTrace()); //CTEST
     }
 
     public static int getInternodeMaxMessageSizeInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_max_message_size_in_bytes" ); //CTEST
         return conf.internode_max_message_size_in_bytes;
     }
 
@@ -2216,10 +2395,12 @@ public class DatabaseDescriptor
     public static void setInternodeMaxMessageSizeInBytes(int value)
     {
         conf.internode_max_message_size_in_bytes = value;
+        logger.warn("[CTEST][SET-PARAM] " + "internode_max_message_size_in_bytes" + getStackTrace()); //CTEST
     }
 
     public static boolean startNativeTransport()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "start_native_transport" ); //CTEST
         return conf.start_native_transport;
     }
 
@@ -2229,6 +2410,7 @@ public class DatabaseDescriptor
      */
     public static int getNativeTransportPort()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_port" ); //CTEST
         return Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + "native_transport_port", Integer.toString(conf.native_transport_port)));
     }
 
@@ -2236,10 +2418,12 @@ public class DatabaseDescriptor
     public static void setNativeTransportPort(int port)
     {
         conf.native_transport_port = port;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_port" + getStackTrace()); //CTEST
     }
 
     public static int getNativeTransportPortSSL()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_port_ssl" ); //CTEST
         return conf.native_transport_port_ssl == null ? getNativeTransportPort() : conf.native_transport_port_ssl;
     }
 
@@ -2247,105 +2431,126 @@ public class DatabaseDescriptor
     public static void setNativeTransportPortSSL(Integer port)
     {
         conf.native_transport_port_ssl = port;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_port_ssl" + getStackTrace()); //CTEST
     }
 
     public static int getNativeTransportMaxThreads()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_max_threads" ); //CTEST
         return conf.native_transport_max_threads;
     }
 
     public static void setNativeTransportMaxThreads(int max_threads)
     {
         conf.native_transport_max_threads = max_threads;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_max_threads" + getStackTrace()); //CTEST
     }
 
     public static int getNativeTransportMaxFrameSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_max_frame_size_in_mb" ); //CTEST
         return (int) ByteUnit.MEBI_BYTES.toBytes(conf.native_transport_max_frame_size_in_mb);
     }
 
     public static long getNativeTransportMaxConcurrentConnections()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_max_concurrent_connections" ); //CTEST
         return conf.native_transport_max_concurrent_connections;
     }
 
     public static void setNativeTransportMaxConcurrentConnections(long nativeTransportMaxConcurrentConnections)
     {
         conf.native_transport_max_concurrent_connections = nativeTransportMaxConcurrentConnections;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_max_concurrent_connections" + getStackTrace()); //CTEST
     }
 
     public static long getNativeTransportMaxConcurrentConnectionsPerIp()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_max_concurrent_connections_per_ip" ); //CTEST
         return conf.native_transport_max_concurrent_connections_per_ip;
     }
 
     public static void setNativeTransportMaxConcurrentConnectionsPerIp(long native_transport_max_concurrent_connections_per_ip)
     {
         conf.native_transport_max_concurrent_connections_per_ip = native_transport_max_concurrent_connections_per_ip;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_max_concurrent_connections_per_ip" + getStackTrace()); //CTEST
     }
 
     public static boolean useNativeTransportLegacyFlusher()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_flush_in_batches_legacy" ); //CTEST
         return conf.native_transport_flush_in_batches_legacy;
     }
 
     public static boolean getNativeTransportAllowOlderProtocols()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_allow_older_protocols" ); //CTEST
         return conf.native_transport_allow_older_protocols;
     }
 
     public static void setNativeTransportAllowOlderProtocols(boolean isEnabled)
     {
         conf.native_transport_allow_older_protocols = isEnabled;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_allow_older_protocols" + getStackTrace()); //CTEST
     }
 
     public static double getCommitLogSyncGroupWindow()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_sync_group_window_in_ms" ); //CTEST
         return conf.commitlog_sync_group_window_in_ms;
     }
 
     public static void setCommitLogSyncGroupWindow(double windowMillis)
     {
         conf.commitlog_sync_group_window_in_ms = windowMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_sync_group_window_in_ms" + getStackTrace()); //CTEST
     }
 
     public static int getNativeTransportReceiveQueueCapacityInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_receive_queue_capacity_in_bytes" ); //CTEST
         return conf.native_transport_receive_queue_capacity_in_bytes;
     }
 
     public static void setNativeTransportReceiveQueueCapacityInBytes(int queueSize)
     {
         conf.native_transport_receive_queue_capacity_in_bytes = queueSize;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_receive_queue_capacity_in_bytes" + getStackTrace()); //CTEST
     }
 
     public static long getNativeTransportMaxConcurrentRequestsInBytesPerIp()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_max_concurrent_requests_in_bytes_per_ip" ); //CTEST
         return conf.native_transport_max_concurrent_requests_in_bytes_per_ip;
     }
 
     public static void setNativeTransportMaxConcurrentRequestsInBytesPerIp(long maxConcurrentRequestsInBytes)
     {
         conf.native_transport_max_concurrent_requests_in_bytes_per_ip = maxConcurrentRequestsInBytes;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_max_concurrent_requests_in_bytes_per_ip" + getStackTrace()); //CTEST
     }
 
     public static long getNativeTransportMaxConcurrentRequestsInBytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "native_transport_max_concurrent_requests_in_bytes" ); //CTEST
         return conf.native_transport_max_concurrent_requests_in_bytes;
     }
 
     public static void setNativeTransportMaxConcurrentRequestsInBytes(long maxConcurrentRequestsInBytes)
     {
         conf.native_transport_max_concurrent_requests_in_bytes = maxConcurrentRequestsInBytes;
+        logger.warn("[CTEST][SET-PARAM] " + "native_transport_max_concurrent_requests_in_bytes" + getStackTrace()); //CTEST
     }
 
     public static int getCommitLogSyncPeriod()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_sync_period_in_ms" ); //CTEST
         return conf.commitlog_sync_period_in_ms;
     }
 
     public static long getPeriodicCommitLogSyncBlock()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "periodic_commitlog_sync_lag_block_in_ms" ); //CTEST
         Integer blockMillis = conf.periodic_commitlog_sync_lag_block_in_ms;
         return blockMillis == null
                ? (long)(getCommitLogSyncPeriod() * 1.5)
@@ -2355,20 +2560,24 @@ public class DatabaseDescriptor
     public static void setCommitLogSyncPeriod(int periodMillis)
     {
         conf.commitlog_sync_period_in_ms = periodMillis;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_sync_period_in_ms" + getStackTrace()); //CTEST
     }
 
     public static Config.CommitLogSync getCommitLogSync()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_sync" ); //CTEST
         return conf.commitlog_sync;
     }
 
     public static void setCommitLogSync(CommitLogSync sync)
     {
         conf.commitlog_sync = sync;
+        logger.warn("[CTEST][SET-PARAM] " + "commitlog_sync" + getStackTrace()); //CTEST
     }
 
     public static Config.DiskAccessMode getDiskAccessMode()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "disk_access_mode" ); //CTEST
         return conf.disk_access_mode;
     }
 
@@ -2377,6 +2586,7 @@ public class DatabaseDescriptor
     public static void setDiskAccessMode(Config.DiskAccessMode mode)
     {
         conf.disk_access_mode = mode;
+        logger.warn("[CTEST][SET-PARAM] " + "disk_access_mode" + getStackTrace()); //CTEST
     }
 
     public static Config.DiskAccessMode getIndexAccessMode()
@@ -2394,30 +2604,36 @@ public class DatabaseDescriptor
     public static void setDiskFailurePolicy(Config.DiskFailurePolicy policy)
     {
         conf.disk_failure_policy = policy;
+        logger.warn("[CTEST][SET-PARAM] " + "disk_failure_policy" + getStackTrace()); //CTEST
     }
 
     public static Config.DiskFailurePolicy getDiskFailurePolicy()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "disk_failure_policy" ); //CTEST
         return conf.disk_failure_policy;
     }
 
     public static void setCommitFailurePolicy(Config.CommitFailurePolicy policy)
     {
         conf.commit_failure_policy = policy;
+        logger.warn("[CTEST][SET-PARAM] " + "commit_failure_policy" + getStackTrace()); //CTEST
     }
 
     public static Config.CommitFailurePolicy getCommitFailurePolicy()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commit_failure_policy" ); //CTEST
         return conf.commit_failure_policy;
     }
 
     public static boolean isSnapshotBeforeCompaction()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "snapshot_before_compaction" ); //CTEST
         return conf.snapshot_before_compaction;
     }
 
     public static boolean isAutoSnapshot()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "auto_snapshot" ); //CTEST
         return conf.auto_snapshot;
     }
 
@@ -2425,15 +2641,18 @@ public class DatabaseDescriptor
     public static void setAutoSnapshot(boolean autoSnapshot)
     {
         conf.auto_snapshot = autoSnapshot;
+        logger.warn("[CTEST][SET-PARAM] " + "auto_snapshot" + getStackTrace()); //CTEST
     }
     @VisibleForTesting
     public static boolean getAutoSnapshot()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "auto_snapshot" ); //CTEST
         return conf.auto_snapshot;
     }
 
     public static long getSnapshotLinksPerSecond()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "snapshot_links_per_second" ); //CTEST
         return conf.snapshot_links_per_second == 0 ? Long.MAX_VALUE : conf.snapshot_links_per_second;
     }
 
@@ -2443,6 +2662,7 @@ public class DatabaseDescriptor
             throw new IllegalArgumentException("Invalid throttle for snapshot_links_per_second: must be positive");
 
         conf.snapshot_links_per_second = throttle;
+        logger.warn("[CTEST][SET-PARAM] " + "snapshot_links_per_second" + getStackTrace()); //CTEST
     }
 
     public static RateLimiter getSnapshotRateLimiter()
@@ -2452,51 +2672,61 @@ public class DatabaseDescriptor
 
     public static boolean isAutoBootstrap()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "auto_bootstrap" ); //CTEST
         return Boolean.parseBoolean(System.getProperty(Config.PROPERTY_PREFIX + "auto_bootstrap", Boolean.toString(conf.auto_bootstrap)));
     }
 
     public static void setHintedHandoffEnabled(boolean hintedHandoffEnabled)
     {
         conf.hinted_handoff_enabled = hintedHandoffEnabled;
+        logger.warn("[CTEST][SET-PARAM] " + "hinted_handoff_enabled" + getStackTrace()); //CTEST
     }
 
     public static boolean hintedHandoffEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "hinted_handoff_enabled" ); //CTEST
         return conf.hinted_handoff_enabled;
     }
 
     public static Set<String> hintedHandoffDisabledDCs()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "hinted_handoff_disabled_datacenters" ); //CTEST
         return conf.hinted_handoff_disabled_datacenters;
     }
 
     public static void enableHintsForDC(String dc)
     {
         conf.hinted_handoff_disabled_datacenters.remove(dc);
+        logger.warn("[CTEST][SET-PARAM] " + "hinted_handoff_disabled_datacenters" + getStackTrace()); //CTEST
     }
 
     public static void disableHintsForDC(String dc)
     {
         conf.hinted_handoff_disabled_datacenters.add(dc);
+        logger.warn("[CTEST][SET-PARAM] " + "hinted_handoff_disabled_datacenters" + getStackTrace()); //CTEST
     }
 
     public static void setMaxHintWindow(int ms)
     {
         conf.max_hint_window_in_ms = ms;
+        logger.warn("[CTEST][SET-PARAM] " + "max_hint_window_in_ms" + getStackTrace()); //CTEST
     }
 
     public static int getMaxHintWindow()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "max_hint_window_in_ms" ); //CTEST
         return conf.max_hint_window_in_ms;
     }
 
     public static File getHintsDirectory()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "hints_directory" ); //CTEST
         return new File(conf.hints_directory);
     }
 
     public static File getSerializedCachePath(CacheType cacheType, String version, String extension)
     {
+        logger.warn("[CTEST][GET-PARAM] " + "saved_caches_directory" ); //CTEST
         String name = cacheType.toString()
                 + (version == null ? "" : '-' + version + '.' + extension);
         return new File(conf.saved_caches_directory, name);
@@ -2504,44 +2734,53 @@ public class DatabaseDescriptor
 
     public static int getDynamicUpdateInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "dynamic_snitch_update_interval_in_ms" ); //CTEST
         return conf.dynamic_snitch_update_interval_in_ms;
     }
     public static void setDynamicUpdateInterval(int dynamicUpdateInterval)
     {
         conf.dynamic_snitch_update_interval_in_ms = dynamicUpdateInterval;
+        logger.warn("[CTEST][SET-PARAM] " + "dynamic_snitch_update_interval_in_ms" + getStackTrace()); //CTEST
     }
 
     public static int getDynamicResetInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "dynamic_snitch_reset_interval_in_ms" ); //CTEST
         return conf.dynamic_snitch_reset_interval_in_ms;
     }
     public static void setDynamicResetInterval(int dynamicResetInterval)
     {
         conf.dynamic_snitch_reset_interval_in_ms = dynamicResetInterval;
+        logger.warn("[CTEST][SET-PARAM] " + "dynamic_snitch_reset_interval_in_ms" + getStackTrace()); //CTEST
     }
 
     public static double getDynamicBadnessThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "dynamic_snitch_badness_threshold" ); //CTEST
         return conf.dynamic_snitch_badness_threshold;
     }
 
     public static void setDynamicBadnessThreshold(double dynamicBadnessThreshold)
     {
         conf.dynamic_snitch_badness_threshold = dynamicBadnessThreshold;
+        logger.warn("[CTEST][SET-PARAM] " + "dynamic_snitch_badness_threshold" + getStackTrace()); //CTEST
     }
 
     public static EncryptionOptions.ServerEncryptionOptions getInternodeMessagingEncyptionOptions()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "server_encryption_options" ); //CTEST
         return conf.server_encryption_options;
     }
 
     public static void setInternodeMessagingEncyptionOptions(EncryptionOptions.ServerEncryptionOptions encryptionOptions)
     {
         conf.server_encryption_options = encryptionOptions;
+        logger.warn("[CTEST][SET-PARAM] " + "server_encryption_options" + getStackTrace()); //CTEST
     }
 
     public static EncryptionOptions getNativeProtocolEncryptionOptions()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "client_encryption_options" ); //CTEST
         return conf.client_encryption_options;
     }
 
@@ -2549,35 +2788,42 @@ public class DatabaseDescriptor
     public static void updateNativeProtocolEncryptionOptions(Function<EncryptionOptions, EncryptionOptions> update)
     {
         conf.client_encryption_options = update.apply(conf.client_encryption_options);
+        logger.warn("[CTEST][SET-PARAM] " + "client_encryption_options" + getStackTrace()); //CTEST
     }
 
     public static int getHintedHandoffThrottleInKB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "hinted_handoff_throttle_in_kb" ); //CTEST
         return conf.hinted_handoff_throttle_in_kb;
     }
 
     public static void setHintedHandoffThrottleInKB(int throttleInKB)
     {
         conf.hinted_handoff_throttle_in_kb = throttleInKB;
+        logger.warn("[CTEST][SET-PARAM] " + "hinted_handoff_throttle_in_kb" + getStackTrace()); //CTEST
     }
 
     public static int getBatchlogReplayThrottleInKB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "batchlog_replay_throttle_in_kb" ); //CTEST
         return conf.batchlog_replay_throttle_in_kb;
     }
 
     public static void setBatchlogReplayThrottleInKB(int throttleInKB)
     {
         conf.batchlog_replay_throttle_in_kb = throttleInKB;
+        logger.warn("[CTEST][SET-PARAM] " + "batchlog_replay_throttle_in_kb" + getStackTrace()); //CTEST
     }
 
     public static int getMaxHintsDeliveryThreads()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "max_hints_delivery_threads" ); //CTEST
         return conf.max_hints_delivery_threads;
     }
 
     public static int getHintsFlushPeriodInMS()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "hints_flush_period_in_ms" ); //CTEST
         return conf.hints_flush_period_in_ms;
     }
 
@@ -2588,26 +2834,31 @@ public class DatabaseDescriptor
 
     public static ParameterizedClass getHintsCompression()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "hints_compression" ); //CTEST
         return conf.hints_compression;
     }
 
     public static void setHintsCompression(ParameterizedClass parameterizedClass)
     {
         conf.hints_compression = parameterizedClass;
+        logger.warn("[CTEST][SET-PARAM] " + "hints_compression" + getStackTrace()); //CTEST
     }
 
     public static boolean isIncrementalBackupsEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "incremental_backups" ); //CTEST
         return conf.incremental_backups;
     }
 
     public static void setIncrementalBackupsEnabled(boolean value)
     {
         conf.incremental_backups = value;
+        logger.warn("[CTEST][SET-PARAM] " + "incremental_backups" + getStackTrace()); //CTEST
     }
 
     public static boolean getFileCacheEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "file_cache_enabled" ); //CTEST
         return conf.file_cache_enabled;
     }
 
@@ -2620,6 +2871,7 @@ public class DatabaseDescriptor
             return 0;
         }
 
+        logger.warn("[CTEST][GET-PARAM] " + "file_cache_size_in_mb" ); //CTEST
         return conf.file_cache_size_in_mb;
     }
 
@@ -2631,6 +2883,7 @@ public class DatabaseDescriptor
             assert DatabaseDescriptor.isClientInitialized();
             return 0;
         }
+        logger.warn("[CTEST][GET-PARAM] " + "networking_cache_size_in_mb" ); //CTEST
         return conf.networking_cache_size_in_mb;
     }
 
@@ -2643,6 +2896,7 @@ public class DatabaseDescriptor
             return false;
         }
 
+        logger.warn("[CTEST][GET-PARAM] " + "file_cache_round_up" ); //CTEST
         return conf.file_cache_round_up;
     }
 
@@ -2653,40 +2907,48 @@ public class DatabaseDescriptor
 
     public static double getDiskOptimizationEstimatePercentile()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "disk_optimization_estimate_percentile" ); //CTEST
         return conf.disk_optimization_estimate_percentile;
     }
 
     public static long getTotalCommitlogSpaceInMB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "commitlog_total_space_in_mb" ); //CTEST
         return conf.commitlog_total_space_in_mb;
     }
 
     public static boolean shouldMigrateKeycacheOnCompaction()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "key_cache_migrate_during_compaction" ); //CTEST
         return conf.key_cache_migrate_during_compaction;
     }
 
     public static void setMigrateKeycacheOnCompaction(boolean migrateCacheEntry)
     {
         conf.key_cache_migrate_during_compaction = migrateCacheEntry;
+        logger.warn("[CTEST][SET-PARAM] " + "key_cache_migrate_during_compaction" + getStackTrace()); //CTEST
     }
 
     public static int getSSTablePreemptiveOpenIntervalInMB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "sstable_preemptive_open_interval_in_mb" ); //CTEST
         return FBUtilities.isWindows ? -1 : conf.sstable_preemptive_open_interval_in_mb;
     }
     public static void setSSTablePreemptiveOpenIntervalInMB(int mb)
     {
         conf.sstable_preemptive_open_interval_in_mb = mb;
+        logger.warn("[CTEST][SET-PARAM] " + "sstable_preemptive_open_interval_in_mb" + getStackTrace()); //CTEST
     }
 
     public static boolean getTrickleFsync()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "trickle_fsync" ); //CTEST
         return conf.trickle_fsync;
     }
 
     public static int getTrickleFsyncIntervalInKb()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "trickle_fsync_interval_in_kb" ); //CTEST
         return conf.trickle_fsync_interval_in_kb;
     }
 
@@ -2702,31 +2964,37 @@ public class DatabaseDescriptor
 
     public static int getKeyCacheSavePeriod()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "key_cache_save_period" ); //CTEST
         return conf.key_cache_save_period;
     }
 
     public static void setKeyCacheSavePeriod(int keyCacheSavePeriod)
     {
         conf.key_cache_save_period = keyCacheSavePeriod;
+        logger.warn("[CTEST][SET-PARAM] " + "key_cache_save_period" + getStackTrace()); //CTEST
     }
 
     public static int getKeyCacheKeysToSave()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "key_cache_keys_to_save" ); //CTEST
         return conf.key_cache_keys_to_save;
     }
 
     public static void setKeyCacheKeysToSave(int keyCacheKeysToSave)
     {
         conf.key_cache_keys_to_save = keyCacheKeysToSave;
+        logger.warn("[CTEST][SET-PARAM] " + "key_cache_keys_to_save" + getStackTrace()); //CTEST
     }
 
     public static String getRowCacheClassName()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "row_cache_class_name" ); //CTEST
         return conf.row_cache_class_name;
     }
 
     public static long getRowCacheSizeInMB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "row_cache_size_in_mb" ); //CTEST
         return conf.row_cache_size_in_mb;
     }
 
@@ -2734,20 +3002,24 @@ public class DatabaseDescriptor
     public static void setRowCacheSizeInMB(long val)
     {
         conf.row_cache_size_in_mb = val;
+        logger.warn("[CTEST][SET-PARAM] " + "row_cache_size_in_mb" + getStackTrace()); //CTEST
     }
 
     public static int getRowCacheSavePeriod()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "row_cache_save_period" ); //CTEST
         return conf.row_cache_save_period;
     }
 
     public static void setRowCacheSavePeriod(int rowCacheSavePeriod)
     {
         conf.row_cache_save_period = rowCacheSavePeriod;
+        logger.warn("[CTEST][SET-PARAM] " + "row_cache_save_period" + getStackTrace()); //CTEST
     }
 
     public static int getRowCacheKeysToSave()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "row_cache_keys_to_save" ); //CTEST
         return conf.row_cache_keys_to_save;
     }
 
@@ -2759,20 +3031,24 @@ public class DatabaseDescriptor
     public static void setRowCacheKeysToSave(int rowCacheKeysToSave)
     {
         conf.row_cache_keys_to_save = rowCacheKeysToSave;
+        logger.warn("[CTEST][SET-PARAM] " + "row_cache_keys_to_save" + getStackTrace()); //CTEST
     }
 
     public static int getCounterCacheSavePeriod()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "counter_cache_save_period" ); //CTEST
         return conf.counter_cache_save_period;
     }
 
     public static void setCounterCacheSavePeriod(int counterCacheSavePeriod)
     {
         conf.counter_cache_save_period = counterCacheSavePeriod;
+        logger.warn("[CTEST][SET-PARAM] " + "counter_cache_save_period" + getStackTrace()); //CTEST
     }
 
     public static int getCacheLoadTimeout()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cache_load_timeout_seconds" ); //CTEST
         return conf.cache_load_timeout_seconds;
     }
 
@@ -2780,30 +3056,36 @@ public class DatabaseDescriptor
     public static void setCacheLoadTimeout(int seconds)
     {
         conf.cache_load_timeout_seconds = seconds;
+        logger.warn("[CTEST][SET-PARAM] " + "cache_load_timeout_seconds" + getStackTrace()); //CTEST
     }
 
     public static int getCounterCacheKeysToSave()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "counter_cache_keys_to_save" ); //CTEST
         return conf.counter_cache_keys_to_save;
     }
 
     public static void setCounterCacheKeysToSave(int counterCacheKeysToSave)
     {
         conf.counter_cache_keys_to_save = counterCacheKeysToSave;
+        logger.warn("[CTEST][SET-PARAM] " + "counter_cache_keys_to_save" + getStackTrace()); //CTEST
     }
 
     public static int getStreamingKeepAlivePeriod()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "streaming_keep_alive_period_in_secs" ); //CTEST
         return conf.streaming_keep_alive_period_in_secs;
     }
 
     public static int getStreamingConnectionsPerHost()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "streaming_connections_per_host" ); //CTEST
         return conf.streaming_connections_per_host;
     }
 
     public static boolean streamEntireSSTables()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "stream_entire_sstables" ); //CTEST
         return conf.stream_entire_sstables;
     }
 
@@ -2814,41 +3096,49 @@ public class DatabaseDescriptor
 
     public static Comparator<Replica> getLocalComparator()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "localComparator" ); //CTEST
         return localComparator;
     }
 
     public static Config.InternodeCompression internodeCompression()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "internode_compression" ); //CTEST
         return conf.internode_compression;
     }
 
     public static void setInternodeCompression(Config.InternodeCompression compression)
     {
         conf.internode_compression = compression;
+        logger.warn("[CTEST][SET-PARAM] " + "internode_compression" + getStackTrace()); //CTEST
     }
 
     public static boolean getInterDCTcpNoDelay()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "inter_dc_tcp_nodelay" ); //CTEST
         return conf.inter_dc_tcp_nodelay;
     }
 
     public static long getMemtableHeapSpaceInMb()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "memtable_heap_space_in_mb" ); //CTEST
         return conf.memtable_heap_space_in_mb;
     }
 
     public static long getMemtableOffheapSpaceInMb()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "memtable_offheap_space_in_mb" ); //CTEST
         return conf.memtable_offheap_space_in_mb;
     }
 
     public static Config.MemtableAllocationType getMemtableAllocationType()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "memtable_allocation_type" ); //CTEST
         return conf.memtable_allocation_type;
     }
 
     public static int getRepairSessionMaxTreeDepth()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repair_session_max_tree_depth" ); //CTEST
         return conf.repair_session_max_tree_depth;
     }
 
@@ -2861,10 +3151,12 @@ public class DatabaseDescriptor
             logger.warn("repair_session_max_tree_depth of " + depth + " > 20 could lead to excessive memory usage");
 
         conf.repair_session_max_tree_depth = depth;
+        logger.warn("[CTEST][SET-PARAM] " + "repair_session_max_tree_depth" + getStackTrace()); //CTEST
     }
 
     public static int getRepairSessionSpaceInMegabytes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repair_session_space_in_mb" ); //CTEST
         return conf.repair_session_space_in_mb;
     }
 
@@ -2878,21 +3170,25 @@ public class DatabaseDescriptor
                         " megabytes is likely to cause heap pressure.");
 
         conf.repair_session_space_in_mb = sizeInMegabytes;
+        logger.warn("[CTEST][SET-PARAM] " + "repair_session_space_in_mb" + getStackTrace()); //CTEST
     }
 
     public static Float getMemtableCleanupThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "memtable_cleanup_threshold" ); //CTEST
         return conf.memtable_cleanup_threshold;
     }
 
     public static int getIndexSummaryResizeIntervalInMinutes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "index_summary_resize_interval_in_minutes" ); //CTEST
         return conf.index_summary_resize_interval_in_minutes;
     }
 
     public static void setIndexSummaryResizeIntervalInMinutes(int value)
     {
         conf.index_summary_resize_interval_in_minutes = value;
+        logger.warn("[CTEST][SET-PARAM] " + "index_summary_resize_interval_in_minutes" + getStackTrace()); //CTEST
     }
 
     public static boolean hasLargeAddressSpace()
@@ -2913,16 +3209,19 @@ public class DatabaseDescriptor
 
     public static int getTracetypeRepairTTL()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "tracetype_repair_ttl" ); //CTEST
         return conf.tracetype_repair_ttl;
     }
 
     public static int getTracetypeQueryTTL()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "tracetype_query_ttl" ); //CTEST
         return conf.tracetype_query_ttl;
     }
 
     public static int getWindowsTimerInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "windows_timer_interval" ); //CTEST
         return conf.windows_timer_interval;
     }
 
@@ -2933,76 +3232,91 @@ public class DatabaseDescriptor
 
     public static boolean enableUserDefinedFunctions()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_user_defined_functions" ); //CTEST
         return conf.enable_user_defined_functions;
     }
 
     public static boolean enableScriptedUserDefinedFunctions()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_scripted_user_defined_functions" ); //CTEST
         return conf.enable_scripted_user_defined_functions;
     }
 
     public static void enableScriptedUserDefinedFunctions(boolean enableScriptedUserDefinedFunctions)
     {
         conf.enable_scripted_user_defined_functions = enableScriptedUserDefinedFunctions;
+        logger.warn("[CTEST][SET-PARAM] " + "enable_scripted_user_defined_functions" + getStackTrace()); //CTEST
     }
 
     public static boolean enableUserDefinedFunctionsThreads()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_user_defined_functions_threads" ); //CTEST
         return conf.enable_user_defined_functions_threads;
     }
 
     public static long getUserDefinedFunctionWarnTimeout()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "user_defined_function_warn_timeout" ); //CTEST
         return conf.user_defined_function_warn_timeout;
     }
 
     public static void setUserDefinedFunctionWarnTimeout(long userDefinedFunctionWarnTimeout)
     {
         conf.user_defined_function_warn_timeout = userDefinedFunctionWarnTimeout;
+        logger.warn("[CTEST][SET-PARAM] " + "user_defined_function_warn_timeout" + getStackTrace()); //CTEST
     }
 
     public static boolean allowInsecureUDFs()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "allow_insecure_udfs" ); //CTEST
         return conf.allow_insecure_udfs;
     }
 
     public static boolean allowExtraInsecureUDFs()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "allow_extra_insecure_udfs" ); //CTEST
         return conf.allow_extra_insecure_udfs;
     }
 
     public static boolean getEnableMaterializedViews()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_materialized_views" ); //CTEST
         return conf.enable_materialized_views;
     }
 
     public static void setEnableMaterializedViews(boolean enableMaterializedViews)
     {
         conf.enable_materialized_views = enableMaterializedViews;
+        logger.warn("[CTEST][SET-PARAM] " + "enable_materialized_views" + getStackTrace()); //CTEST
     }
 
     public static boolean getEnableSASIIndexes()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_sasi_indexes" ); //CTEST
         return conf.enable_sasi_indexes;
     }
 
     public static void setEnableSASIIndexes(boolean enableSASIIndexes)
     {
         conf.enable_sasi_indexes = enableSASIIndexes;
+        logger.warn("[CTEST][SET-PARAM] " + "enable_sasi_indexes" + getStackTrace()); //CTEST
     }
 
     public static boolean isTransientReplicationEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_transient_replication" ); //CTEST
         return conf.enable_transient_replication;
     }
 
     public static void setTransientReplicationEnabledUnsafe(boolean enabled)
     {
         conf.enable_transient_replication = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "enable_transient_replication" + getStackTrace()); //CTEST
     }
 
     public static boolean enableDropCompactStorage()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "enable_drop_compact_storage" ); //CTEST
         return conf.enable_drop_compact_storage;
     }
 
@@ -3010,36 +3324,43 @@ public class DatabaseDescriptor
     public static void setEnableDropCompactStorage(boolean enableDropCompactStorage)
     {
         conf.enable_drop_compact_storage = enableDropCompactStorage;
+        logger.warn("[CTEST][SET-PARAM] " + "enable_drop_compact_storage" + getStackTrace()); //CTEST
     }
 
     public static long getUserDefinedFunctionFailTimeout()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "user_defined_function_fail_timeout" ); //CTEST
         return conf.user_defined_function_fail_timeout;
     }
 
     public static void setUserDefinedFunctionFailTimeout(long userDefinedFunctionFailTimeout)
     {
         conf.user_defined_function_fail_timeout = userDefinedFunctionFailTimeout;
+        logger.warn("[CTEST][SET-PARAM] " + "user_defined_function_fail_timeout" + getStackTrace()); //CTEST
     }
 
     public static Config.UserFunctionTimeoutPolicy getUserFunctionTimeoutPolicy()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "user_function_timeout_policy" ); //CTEST
         return conf.user_function_timeout_policy;
     }
 
     public static void setUserFunctionTimeoutPolicy(Config.UserFunctionTimeoutPolicy userFunctionTimeoutPolicy)
     {
         conf.user_function_timeout_policy = userFunctionTimeoutPolicy;
+        logger.warn("[CTEST][SET-PARAM] " + "user_function_timeout_policy" + getStackTrace()); //CTEST
     }
 
     public static long getGCLogThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "gc_log_threshold_in_ms" ); //CTEST
         return conf.gc_log_threshold_in_ms;
     }
 
     public static void setGCLogThreshold(int gcLogThreshold)
     {
         conf.gc_log_threshold_in_ms = gcLogThreshold;
+        logger.warn("[CTEST][SET-PARAM] " + "gc_log_threshold_in_ms" + getStackTrace()); //CTEST
     }
 
     public static EncryptionContext getEncryptionContext()
@@ -3049,16 +3370,19 @@ public class DatabaseDescriptor
 
     public static long getGCWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "gc_warn_threshold_in_ms" ); //CTEST
         return conf.gc_warn_threshold_in_ms;
     }
 
     public static void setGCWarnThreshold(int threshold)
     {
         conf.gc_warn_threshold_in_ms = threshold;
+        logger.warn("[CTEST][SET-PARAM] " + "gc_warn_threshold_in_ms" + getStackTrace()); //CTEST
     }
 
     public static boolean isCDCEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cdc_enabled" ); //CTEST
         return conf.cdc_enabled;
     }
 
@@ -3066,15 +3390,18 @@ public class DatabaseDescriptor
     public static void setCDCEnabled(boolean cdc_enabled)
     {
         conf.cdc_enabled = cdc_enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "cdc_enabled" + getStackTrace()); //CTEST
     }
 
     public static String getCDCLogLocation()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cdc_raw_directory" ); //CTEST
         return conf.cdc_raw_directory;
     }
 
     public static int getCDCSpaceInMB()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cdc_total_space_in_mb" ); //CTEST
         return conf.cdc_total_space_in_mb;
     }
 
@@ -3082,10 +3409,12 @@ public class DatabaseDescriptor
     public static void setCDCSpaceInMB(int input)
     {
         conf.cdc_total_space_in_mb = input;
+        logger.warn("[CTEST][SET-PARAM] " + "cdc_total_space_in_mb" + getStackTrace()); //CTEST
     }
 
     public static int getCDCDiskCheckInterval()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "cdc_free_space_check_interval_ms" ); //CTEST
         return conf.cdc_free_space_check_interval_ms;
     }
 
@@ -3107,51 +3436,61 @@ public class DatabaseDescriptor
 
     public static boolean diagnosticEventsEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "diagnostic_events_enabled" ); //CTEST
         return conf.diagnostic_events_enabled;
     }
 
     public static void setDiagnosticEventsEnabled(boolean enabled)
     {
         conf.diagnostic_events_enabled = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "diagnostic_events_enabled" + getStackTrace()); //CTEST
     }
 
     public static ConsistencyLevel getIdealConsistencyLevel()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "ideal_consistency_level" ); //CTEST
         return conf.ideal_consistency_level;
     }
 
     public static void setIdealConsistencyLevel(ConsistencyLevel cl)
     {
         conf.ideal_consistency_level = cl;
+        logger.warn("[CTEST][SET-PARAM] " + "ideal_consistency_level" + getStackTrace()); //CTEST
     }
 
     public static int getRepairCommandPoolSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repair_command_pool_size" ); //CTEST
         return conf.repair_command_pool_size;
     }
 
     public static Config.RepairCommandPoolFullStrategy getRepairCommandPoolFullStrategy()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repair_command_pool_full_strategy" ); //CTEST
         return conf.repair_command_pool_full_strategy;
     }
 
     public static FullQueryLoggerOptions getFullQueryLogOptions()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "full_query_logging_options" ); //CTEST
         return  conf.full_query_logging_options;
     }
 
     public static boolean getBlockForPeersInRemoteDatacenters()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "block_for_peers_in_remote_dcs" ); //CTEST
         return conf.block_for_peers_in_remote_dcs;
     }
 
     public static int getBlockForPeersTimeoutInSeconds()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "block_for_peers_timeout_in_secs" ); //CTEST
         return conf.block_for_peers_timeout_in_secs;
     }
 
     public static boolean automaticSSTableUpgrade()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "automatic_sstable_upgrade" ); //CTEST
         return conf.automatic_sstable_upgrade;
     }
 
@@ -3160,10 +3499,12 @@ public class DatabaseDescriptor
         if (conf.automatic_sstable_upgrade != enabled)
             logger.debug("Changing automatic_sstable_upgrade to {}", enabled);
         conf.automatic_sstable_upgrade = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "automatic_sstable_upgrade" + getStackTrace()); //CTEST
     }
 
     public static int maxConcurrentAutoUpgradeTasks()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "max_concurrent_automatic_sstable_upgrades" ); //CTEST
         return conf.max_concurrent_automatic_sstable_upgrades;
     }
 
@@ -3173,6 +3514,7 @@ public class DatabaseDescriptor
             logger.debug("Changing max_concurrent_automatic_sstable_upgrades to {}", value);
         validateMaxConcurrentAutoUpgradeTasksConf(value);
         conf.max_concurrent_automatic_sstable_upgrades = value;
+        logger.warn("[CTEST][SET-PARAM] " + "max_concurrent_automatic_sstable_upgrades" + getStackTrace()); //CTEST
     }
 
     private static void validateMaxConcurrentAutoUpgradeTasksConf(int value)
@@ -3182,75 +3524,89 @@ public class DatabaseDescriptor
         if (value > getConcurrentCompactors())
             logger.warn("max_concurrent_automatic_sstable_upgrades ({}) is larger than concurrent_compactors ({})", value, getConcurrentCompactors());
     }
-    
+
     public static AuditLogOptions getAuditLoggingOptions()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "audit_logging_options" ); //CTEST
         return conf.audit_logging_options;
     }
 
     public static void setAuditLoggingOptions(AuditLogOptions auditLoggingOptions)
     {
         conf.audit_logging_options = auditLoggingOptions;
+        logger.warn("[CTEST][SET-PARAM] " + "audit_logging_options" + getStackTrace()); //CTEST
     }
 
     public static Config.CorruptedTombstoneStrategy getCorruptedTombstoneStrategy()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "corrupted_tombstone_strategy" ); //CTEST
         return conf.corrupted_tombstone_strategy;
     }
 
     public static void setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy strategy)
     {
         conf.corrupted_tombstone_strategy = strategy;
+        logger.warn("[CTEST][SET-PARAM] " + "corrupted_tombstone_strategy" + getStackTrace()); //CTEST
     }
 
     public static boolean getRepairedDataTrackingForRangeReadsEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repaired_data_tracking_for_range_reads_enabled" ); //CTEST
         return conf.repaired_data_tracking_for_range_reads_enabled;
     }
 
     public static void setRepairedDataTrackingForRangeReadsEnabled(boolean enabled)
     {
         conf.repaired_data_tracking_for_range_reads_enabled = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "repaired_data_tracking_for_range_reads_enabled" + getStackTrace()); //CTEST
     }
 
     public static boolean getRepairedDataTrackingForPartitionReadsEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "repaired_data_tracking_for_partition_reads_enabled" ); //CTEST
         return conf.repaired_data_tracking_for_partition_reads_enabled;
     }
 
     public static void setRepairedDataTrackingForPartitionReadsEnabled(boolean enabled)
     {
         conf.repaired_data_tracking_for_partition_reads_enabled = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "repaired_data_tracking_for_partition_reads_enabled" + getStackTrace()); //CTEST
     }
 
     public static boolean snapshotOnRepairedDataMismatch()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "snapshot_on_repaired_data_mismatch" ); //CTEST
         return conf.snapshot_on_repaired_data_mismatch;
     }
 
     public static void setSnapshotOnRepairedDataMismatch(boolean enabled)
     {
         conf.snapshot_on_repaired_data_mismatch = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "snapshot_on_repaired_data_mismatch" + getStackTrace()); //CTEST
     }
 
     public static boolean snapshotOnDuplicateRowDetection()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "snapshot_on_duplicate_row_detection" ); //CTEST
         return conf.snapshot_on_duplicate_row_detection;
     }
 
     public static void setSnapshotOnDuplicateRowDetection(boolean enabled)
     {
         conf.snapshot_on_duplicate_row_detection = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "snapshot_on_duplicate_row_detection" + getStackTrace()); //CTEST
     }
 
     public static boolean reportUnconfirmedRepairedDataMismatches()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "report_unconfirmed_repaired_data_mismatches" ); //CTEST
         return conf.report_unconfirmed_repaired_data_mismatches;
     }
 
     public static void reportUnconfirmedRepairedDataMismatches(boolean enabled)
     {
         conf.report_unconfirmed_repaired_data_mismatches = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "report_unconfirmed_repaired_data_mismatches" + getStackTrace()); //CTEST
     }
 
     public static boolean strictRuntimeChecks()
@@ -3260,6 +3616,7 @@ public class DatabaseDescriptor
 
     public static boolean useOffheapMerkleTrees()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "use_offheap_merkle_trees" ); //CTEST
         return conf.use_offheap_merkle_trees;
     }
 
@@ -3267,6 +3624,7 @@ public class DatabaseDescriptor
     {
         logger.info("Setting use_offheap_merkle_trees to {}", value);
         conf.use_offheap_merkle_trees = value;
+        logger.warn("[CTEST][SET-PARAM] " + "use_offheap_merkle_trees" + getStackTrace()); //CTEST
     }
 
     public static Function<CommitLog, AbstractCommitLogSegmentManager> getCommitLogSegmentMgrProvider()
@@ -3323,67 +3681,80 @@ public class DatabaseDescriptor
 
     public static int getValidationPreviewPurgeHeadStartInSec()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "validation_preview_purge_head_start_in_sec" ); //CTEST
         int seconds = conf.validation_preview_purge_head_start_in_sec;
         return Math.max(seconds, 0);
     }
 
     public static boolean checkForDuplicateRowsDuringReads()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "check_for_duplicate_rows_during_reads" ); //CTEST
         return conf.check_for_duplicate_rows_during_reads;
     }
 
     public static void setCheckForDuplicateRowsDuringReads(boolean enabled)
     {
         conf.check_for_duplicate_rows_during_reads = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "check_for_duplicate_rows_during_reads" + getStackTrace()); //CTEST
     }
 
     public static boolean checkForDuplicateRowsDuringCompaction()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "check_for_duplicate_rows_during_compaction" ); //CTEST
         return conf.check_for_duplicate_rows_during_compaction;
     }
 
     public static void setCheckForDuplicateRowsDuringCompaction(boolean enabled)
     {
         conf.check_for_duplicate_rows_during_compaction = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "check_for_duplicate_rows_during_compaction" + getStackTrace()); //CTEST
     }
 
     public static int getRepairPendingCompactionRejectThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "reject_repair_compaction_threshold" ); //CTEST
         return conf.reject_repair_compaction_threshold;
     }
 
     public static void setRepairPendingCompactionRejectThreshold(int value)
     {
         conf.reject_repair_compaction_threshold = value;
+        logger.warn("[CTEST][SET-PARAM] " + "reject_repair_compaction_threshold" + getStackTrace()); //CTEST
     }
 
     public static int getInitialRangeTombstoneListAllocationSize()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "initial_range_tombstone_list_allocation_size" ); //CTEST
         return conf.initial_range_tombstone_list_allocation_size;
     }
 
     public static void setInitialRangeTombstoneListAllocationSize(int size)
     {
         conf.initial_range_tombstone_list_allocation_size = size;
+        logger.warn("[CTEST][SET-PARAM] " + "initial_range_tombstone_list_allocation_size" + getStackTrace()); //CTEST
     }
 
     public static double getRangeTombstoneListGrowthFactor()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "range_tombstone_list_growth_factor" ); //CTEST
         return conf.range_tombstone_list_growth_factor;
     }
 
     public static void setRangeTombstoneListGrowthFactor(double resizeFactor)
     {
         conf.range_tombstone_list_growth_factor = resizeFactor;
+        logger.warn("[CTEST][SET-PARAM] " + "range_tombstone_list_growth_factor" + getStackTrace()); //CTEST
     }
 
     public static boolean getAutocompactionOnStartupEnabled()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "autocompaction_on_startup_enabled" ); //CTEST
         return conf.autocompaction_on_startup_enabled;
     }
 
     public static boolean autoOptimiseIncRepairStreams()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "auto_optimise_inc_repair_streams" ); //CTEST
         return conf.auto_optimise_inc_repair_streams;
     }
 
@@ -3392,10 +3763,12 @@ public class DatabaseDescriptor
         if (enabled != conf.auto_optimise_inc_repair_streams)
             logger.info("Changing auto_optimise_inc_repair_streams from {} to {}", conf.auto_optimise_inc_repair_streams, enabled);
         conf.auto_optimise_inc_repair_streams = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "auto_optimise_inc_repair_streams" + getStackTrace()); //CTEST
     }
 
     public static boolean autoOptimiseFullRepairStreams()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "auto_optimise_full_repair_streams" ); //CTEST
         return conf.auto_optimise_full_repair_streams;
     }
 
@@ -3404,10 +3777,12 @@ public class DatabaseDescriptor
         if (enabled != conf.auto_optimise_full_repair_streams)
             logger.info("Changing auto_optimise_full_repair_streams from {} to {}", conf.auto_optimise_full_repair_streams, enabled);
         conf.auto_optimise_full_repair_streams = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "auto_optimise_full_repair_streams" + getStackTrace()); //CTEST
     }
 
     public static boolean autoOptimisePreviewRepairStreams()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "auto_optimise_preview_repair_streams" ); //CTEST
         return conf.auto_optimise_preview_repair_streams;
     }
 
@@ -3416,40 +3791,48 @@ public class DatabaseDescriptor
         if (enabled != conf.auto_optimise_preview_repair_streams)
             logger.info("Changing auto_optimise_preview_repair_streams from {} to {}", conf.auto_optimise_preview_repair_streams, enabled);
         conf.auto_optimise_preview_repair_streams = enabled;
+        logger.warn("[CTEST][SET-PARAM] " + "auto_optimise_preview_repair_streams" + getStackTrace()); //CTEST
     }
 
     public static int tableCountWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "table_count_warn_threshold" ); //CTEST
         return conf.table_count_warn_threshold;
     }
 
     public static void setTableCountWarnThreshold(int value)
     {
         conf.table_count_warn_threshold = value;
+        logger.warn("[CTEST][SET-PARAM] " + "table_count_warn_threshold" + getStackTrace()); //CTEST
     }
 
     public static int keyspaceCountWarnThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "keyspace_count_warn_threshold" ); //CTEST
         return conf.keyspace_count_warn_threshold;
     }
 
     public static void setKeyspaceCountWarnThreshold(int value)
     {
         conf.keyspace_count_warn_threshold = value;
+        logger.warn("[CTEST][SET-PARAM] " + "keyspace_count_warn_threshold" + getStackTrace()); //CTEST
     }
 
     public static int getConsecutiveMessageErrorsThreshold()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "consecutive_message_errors_threshold" ); //CTEST
         return conf.consecutive_message_errors_threshold;
     }
 
     public static void setConsecutiveMessageErrorsThreshold(int value)
     {
         conf.consecutive_message_errors_threshold = value;
+        logger.warn("[CTEST][SET-PARAM] " + "consecutive_message_errors_threshold" + getStackTrace()); //CTEST
     }
 
     public static boolean getForceNewPreparedStatementBehaviour()
     {
+        logger.warn("[CTEST][GET-PARAM] " + "force_new_prepared_statement_behaviour" ); //CTEST
         return conf.force_new_prepared_statement_behaviour;
     }
 
@@ -3459,6 +3842,18 @@ public class DatabaseDescriptor
         {
             logger.info("Setting force_new_prepared_statement_behaviour to {}", value);
             conf.force_new_prepared_statement_behaviour = value;
+            logger.warn("[CTEST][SET-PARAM] " + "force_new_prepared_statement_behaviour" + getStackTrace()); //CTEST
+        }
+    }
+
+    // CTEST
+    private static String getStackTrace() {
+        String stacktrace = " ";
+        for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+            stacktrace = stacktrace.concat(
+                element.getClassName() + "#" + element.getMethodName() + "#" + element.getLineNumber() + "\t"
+            );
         }
+        return stacktrace;
     }
 }
